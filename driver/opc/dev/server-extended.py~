import asyncio
import logging
import datetime
import math

from asyncua import Server, ua
from asyncua.common.methods import uamethod


@uamethod
def multiply_by_two(parent, value):
    return value * 2


#
# async def setup_users(server):
#     # Define a user with a username and password
#     await server.user_manager.set_user_manager(user_manager)
#     server.user_manager.user_manager.add_user('username', 'password')
#
# def user_manager(isession, username, password):
#     # This is a simple user validation function; customize as needed
#     if username == 'username' and password == 'password':
#         return True
#     logging.warning(f"Unauthorized login attempt: {username}")
#     return False

async def main():
    # Initialize logging
    logging.basicConfig(level=logging.INFO)
    _logger = logging.getLogger('asyncua')

    # Setup our server
    server = Server()
    await server.init()
    server.set_endpoint("opc.tcp://localhost:4840/freeopcua/server/")
    # server.set_security_policy([
    #     ua.SecurityPolicyType.Basic256Sha256_SignAndEncrypt
    # ])

    # Register a namespace
    uri = "http://examples.freeopcua.github.io"
    idx = await server.register_namespace(uri)

    # await setup_users(server)

    # Populating our address space
    myobj = await server.nodes.objects.add_object(idx, "MyObject")

    # Add different types of variables
    myvar = await myobj.add_variable(idx, "MyFloat", 6.7, ua.VariantType.Float)
    myint = await myobj.add_variable(idx, "MyInteger", 42, ua.VariantType.Int64)
    mybool = await myobj.add_variable(idx, "MyBoolean", True, ua.VariantType.Boolean)
    mystr = await myobj.add_variable(idx, "MyString", "Hello OPC UA", ua.VariantType.String)
    mydate = await myobj.add_variable(idx, "MyDateTime", datetime.datetime.now(), ua.VariantType.DateTime)
    myarray = await myobj.add_variable(idx, "MyArray", [1, 2, 3], ua.VariantType.Int32)

    # Set variables to be writable by clients
    variables = [myvar, myint, mybool, mystr, mydate, myarray]
    for var in variables:
        await var.set_writable()

    # Add a method to the server
    await server.nodes.objects.add_method(
        ua.NodeId("MultiplyByTwoMethod", idx),
        ua.QualifiedName("MultiplyByTwo", idx),
        multiply_by_two,
        [ua.VariantType.Int64],
        [ua.VariantType.Int64],
    )

    _logger.info("Server started at {}".format(server.endpoint))

    # Update values every second
    i = 0
    async with server:
        while True:
            i += 1
            # # Float variable increment
            new_float = math.sin(i / 10) * 20
            await myvar.write_value(new_float, ua.VariantType.Float)

            # # Toggle Boolean
            new_bool = not await mybool.get_value()
            await mybool.write_value(new_bool)
            
            # Update integer
            new_int = await myint.get_value() + 1
            await myint.write_value(new_int)
            
            # # Update string
            new_str = f"Server time {datetime.datetime.now()}"
            await mystr.write_value(new_str)
            
            # Update DateTime
            new_date = datetime.datetime.utcnow()
            # add 5 mins
            new_date += datetime.timedelta(minutes=5)
            await mydate.write_value(new_date)
            
            # Update Array (error if i uncomment this)
            # new_array = [(x + 1) for x in await myarray.get_value()]
            # await myarray.write_value(new_array)

            # _logger.info(
            #     f"Updated Variables: Float={new_float}, Int={new_int}, Bool={new_bool}, String='{new_str}', DateTime={new_date}, Array={new_array}")

            await asyncio.sleep(0.1)


if __name__ == "__main__":
    asyncio.run(main(), debug=True)
