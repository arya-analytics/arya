name: Publish PyPI Packages

on:
  push:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    # There are three relevant directories:
    # client/py
    # freighter/py
    # alamos/py
    # These are the dependencies
    # client/py -> freighter/py and alamos/py
    # freighter/py -> alamos/py
    # alamos/py -> None
    # we use poetry for dependency management and use relative paths to specify these mono-repo dependencies
    # in development. In order to publish to PyPI, we need to replace these relative paths with the actual
    # package versions. This is done by the following steps:
    # Get the latest versions for each package by reading the pyproject.toml files
    # Replace the relative paths with the actual package versions
    # Publish the packages to PyPI

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Update packages with correct versions
        run: |
          cd ./client/py
          poetry version patch
          CLIENT_VERSION=$(poetry version -s)
          cd ../../freighter/py
          poetry version patch
          FREIGHTER_VERSION=$(poetry version -s)
          cd ../../alamos/py
          poetry version patch
          ALAMOS_VERSION=$(poetry version -s)
          cd ../../client/py
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/synnax-freighter = .*/synnax-freighter = \"^$FREIGHTER_VERSION\"/" pyproject.toml
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/alamos = .*/alamos = \"^$ALAMOS_VERSION\"/" pyproject.toml
          cd ../../freighter/py
          sed -i -E "/^\[tool\.poetry\.dependencies\]$/,/^\[.*\]$/ s/alamos = .*/alamos = \"^$ALAMOS_VERSION\"/" pyproject.toml

          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

          cd ../../alamos/py
          echo "Updating alamos version to $ALAMOS_VERSION"
          echo "Locking alamos dependencies"
          poetry lock -n
          echo "Installing alamos dependencies"
          poetry install -n
          echo "Publishing alamos"
          poetry publish --build --no-interaction

          cd ../../freighter/py
          echo "Updating freighter version to $FREIGHTER_VERSION"
          # poll until the new version of alamos is available
          while true; do
            echo "Locking freighter dependencies"
            # wait until this command exits with 0
            poetry lock -n && break
            poetry cache clear --all -n
            echo "Failed to lock dependencies, retrying in 1 seconds"
            sleep 1
          done
          poetry install -n
          echo "Publishing freighter"
          poetry publish --build --no-interaction

          cd ../../client/py
          echo "Updating client version to $CLIENT_VERSION"
          # poll until the new version of freighter is available
          while true; do
            echo "Locking client dependencies"
            # wait until this command exits with 0
            poetry lock -n && break
            poetry cache clear --all -n
            echo "Failed to lock dependencies, retrying in 1 seconds"
            sleep 1
          done
          poetry install -n
          echo "Publishing client"
          poetry publish --build --no-interaction 









