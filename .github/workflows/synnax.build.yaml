name: "Synnax Build"
on:
  push:
  workflow_dispatch:
permissions:
  contents: write
  packages: write
jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changed:
              - 'synnax/**'
              - 'cesium/**'
              - 'x/**'
              - 'aspen/**'
              - 'freighter/go/**'
              - 'driver/**'
              - '.github/workflows/synnax.build.yaml'

      - name: Get Version
        if: steps.filter.outputs.changed == 'true'
        id: version
        working-directory: ./synnax
        run: echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.filter.outputs.changed == 'true' && github.ref == 'refs/heads/main'
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const release = releases.find(r => r.tag_name === 'synnax-v${{ steps.version.outputs.VERSION }}')
            if (release != null) return release.id
            const { data: { id } } = github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'synnax-v${{ steps.version.outputs.VERSION }}',
              name: 'Synnax v${{ steps.version.outputs.VERSION }}',
              draft: false,
              prerelease: false
            })
            return id;

  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Filter Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changed:
              - 'synnax/**'
              - 'cesium/**'
              - 'x/**'
              - 'aspen/**'
              - 'freighter/go/**'
              - '.github/workflows/synnax.build.yaml'

      - name: Determine OS
        if: steps.filter.outputs.changed == 'true'
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_OUTPUT
          fi

      - name: Diff Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changed:
              - 'synnax/**'
              - 'cesium/**'
              - 'x/**'
              - 'console/**'
              - 'freighter/go/**'
              - 'driver/**'
              - '.github/workflows/synnax.build.yaml'

      - name: Update Submodules
        if: steps.filter.outputs.changed == 'true'
        run: git submodule update --init --recursive

      - name: Setup Bazel
        if: steps.filter.outputs.changed == 'true'
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        if: matrix.platform == 'windows-latest' && steps.filter.outputs.changed == 'true'
        with:
          sdk-version: 22000

      - name: Build Open62541
        if: steps.filter.outputs.changed == 'true'
        shell: bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUA_NAMESPACE_ZERO=FULL -DCMAKE_INSTALL_PREFIX=../out ..
          cmake --build . --config RelWithDebInfo --target install
        working-directory: driver/vendor/open62541/open62541

      - name: Build Driver on Windows
        if: matrix.platform == 'windows-latest' && steps.filter.outputs.changed == 'true'
        run: bazel --output_user_root=C:/tmp build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Build Driver on mac
        if: matrix.platform == 'macos-latest' && steps.filter.outputs.changed == 'true'
        run: bazel build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Build Driver on ubuntu
        if: matrix.platform == 'ubuntu-latest' && steps.filter.outputs.changed == 'true'
        run: bazel build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Determine Executable Name
        id: executable
        if: steps.filter.outputs.changed == 'true'
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          fi

      - name: Move Driver
        run: mv bazel-bin/driver/driver_main${{ steps.executable.outputs.EXECUTABLE }} synnax/pkg/hardware/embedded/assets/
      
      - name: Rename Driver
        run: mv synnax/pkg/hardware/embedded/assets/driver_main${{ steps.executable.outputs.EXECUTABLE }} synnax/pkg/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}

      - name: Set up Go
        if: steps.filter.outputs.changed == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.work"
          cache-dependency-path: |
            "alamos/go/go.sum"
            "aspen/go.sum"
            "cesium/go.sum"
            "freighter/go/go.sum"
            "synnax/go.sum"
            "x/go/go.sum"

      - name: Download Dependencies
        if: steps.filter.outputs.changed == 'true'
        working-directory: ./synnax
        run: |
          go mod download

      - name: Get Version
        if: steps.filter.outputs.changed == 'true'
        id: version
        working-directory: ./synnax
        shell: bash
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Build
        if: steps.filter.outputs.changed == 'true' 
        working-directory: ./synnax
        run: |
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}

      - name: Upload Release Asset
        if: steps.filter.outputs.changed == 'true' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload --clobber synnax-v${{ steps.version.outputs.VERSION }} ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}

      - name: Download latest earthly
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        uses: earthly/actions-setup@v1

      - name: Login to Docker Hub
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: earthly --push +docker -tag=${{ steps.version.outputs.VERSION }}
        working-directory: ./synnax
 
      - name: Push to Github Container Registry
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: |
          docker push ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:latest
            docker push ghcr.io/synnaxlabs/synnax:latest
          fi

      - name: Push to Docker Hub
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: |
          docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          docker push synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:latest
            docker push synnaxlabs/synnax:latest
          fi


      - name: Login to Docker Hub
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: earthly --push +docker -tag=${{ steps.version.outputs.VERSION }}
        working-directory: ./synnax
 
      - name: Push to Github Container Registry
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: |
          docker push ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:latest
            docker push ghcr.io/synnaxlabs/synnax:latest
          fi

      - name: Push to Docker Hub
        if: ${{ (matrix.platform == 'ubuntu-latest') && (steps.filter.outputs.changed == 'true') }}
        run: |
          docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          docker push synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:latest
            docker push synnaxlabs/synnax:latest
          fi
