name: "Synnax Build"
on:
  push:
  workflow_dispatch:
jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Diff Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changed:
              - 'synnax/**'
              - 'cesium/**'
              - 'x/**'
              - 'console/**'
              - 'freighter/go/**'
              - '.github/workflows/synnax.build.yaml'

      - name: Download latest earthly
        if: steps.filter.outputs.changed == 'true'
        uses: earthly/actions-setup@v1

      - name: Login to Docker Hub
        if: steps.filter.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: steps.filter.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Evaluate Version
        if: steps.filter.outputs.changed == 'true'
        id: version
        working-directory: ./synnax
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

      - name: Build Image
        if: steps.filter.outputs.changed == 'true'
        run: earthly --push +docker -tag=${{ steps.version.outputs.VERSION }}
        working-directory: ./synnax

      - name: Push to Github Container Registry
        if: steps.filter.outputs.changed == 'true'
        run: |
          docker push ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} ghcr.io/synnaxlabs/synnax:latest
            docker push ghcr.io/synnaxlabs/synnax:latest
          fi

      - name: Push to Docker Hub
        if: steps.filter.outputs.changed == 'true'
        run: |
          docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          docker push synnaxlabs/synnax:${{ steps.version.outputs.VERSION }}
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ghcr.io/synnaxlabs/synnax:${{ steps.version.outputs.VERSION }} synnaxlabs/synnax:latest
            docker push synnaxlabs/synnax:latest
          fi

  create-release:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Diff Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changed:
              - 'synnax/**'
              - 'cesium/**'
              - 'x/**'
              - 'console/**'
              - 'freighter/go/**'
              - '.github/workflows/synnax.build.yaml'

      - name: Get Version
        if: steps.filter.outputs.changed == 'true'
        id: version
        working-directory: ./synnax
        run: echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.filter.outputs.changed == 'true'
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: synnax-driver-v${{ steps.version.outputs.VERSION }}
          name: Synnax Driver v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

  # build:
  #   needs: create-release
  #   if: github.ref == 'refs/heads/main'
  #   strategy:
  #     matrix:
  #       platform: [ macos-latest, ubuntu-latest, windows-latest ]

  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Determine OS
  #       id: os
  #       shell: bash
  #       run: |
  #         if [ "${{ matrix.platform }}" = "macos-latest" ]; then
  #           echo "OS=macos" >> $GITHUB_OUTPUT
  #         elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
  #           echo "OS=linux" >> $GITHUB_OUTPUT
  #         elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
  #           echo "OS=windows" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Diff Changes
  #       uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           changed:
  #             - 'synnax/**'
  #             - 'cesium/**'
  #             - 'x/**'
  #             - 'console/**'
  #             - 'freighter/go/**'
  #             - '.github/workflows/synnax.build.yaml'

  #     - name: Set up Go
  #       if: steps.filter.outputs.changed == 'true'
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: 1.22

  #     - name: Download Dependencies
  #       if: steps.filter.outputs.changed == 'true'
  #       working-directory: ./synnax
  #       run: |
  #         go mod download

  #     - name: Get Version
  #       if: steps.filter.outputs.changed == 'true'
  #       id: version
  #       working-directory: ./synnax
  #       shell: bash
  #       run: |
  #         echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

  #     - name: Build
  #       if: steps.filter.outputs.changed == 'true'
  #       working-directory: ./synnax
  #       run: |
  #         go build -o synnax-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}

  #     - name: Upload Release Asset
  #       if: steps.filter.outputs.changed == 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: gh release upload synnax-v${{ steps.version.outputs.VERSION }} ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}

  build-driver:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine OS
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_OUTPUT
          fi

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22000

      - name: Build Open62541
        shell: bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUA_NAMESPACE_ZERO=FULL -DCMAKE_INSTALL_PREFIX=../out ..
          cmake --build . --config RelWithDebInfo --target install
        working-directory: driver/vendor/open62541/open62541

      - name: Build Driver on Windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: bazel --output_user_root=C:/tmp build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Build Driver on mac
        if: ${{ matrix.platform == 'macos-latest' }}
        run: bazel build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Determine Executable Name
        id: executable
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            echo "EXECUTABLE=" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "EXECUTABLE=.exe" >> $GITHUB_OUTPUT
          fi

      - name: Move Driver
        run: mv bazel-bin/driver/driver_main${{ steps.executable.outputs.EXECUTABLE }} synnax/pkg/hardware/embedded/assets/driver${{ steps.executable.outputs.EXECUTABLE }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.work"
          cache-dependency-path: |
            "alamos/go/go.sum"
            "aspen/go.sum"
            "cesium/go.sum"
            "freighter/go/go.sum"
            "synnax/go.sum"
            "x/go/go.sum"

      - name: Download Dependencies
        working-directory: ./synnax
        run: |
          go mod download

      - name: Get Version
        id: version
        working-directory: ./synnax
        shell: bash
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Build
        working-directory: ./synnax
        run: |
          go build -tags driver -o synnax-driver-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload synnax-driver-v${{ steps.version.outputs.VERSION }} ./synnax/synnax-driver-v${{ steps.version.outputs.VERSION }}-${{ steps.os.outputs.OS }}


