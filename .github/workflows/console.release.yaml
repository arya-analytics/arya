name: "Console Release"
on:
  push:
    branches: main
  workflow_dispatch:
permissions:
  contents: write
env:
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Diff Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changed:
              - "console/package.json"
              - "console/**"
              - ".github/workflows/console.release.yaml"

      - name: Setup Node
        if: steps.filter.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Version
        if: steps.filter.outputs.changed == 'true'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        working-directory: ./console


      - name: Create Release
        if: steps.filter.outputs.changed == 'true'
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { id } }  = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `console-v${process.env.PACKAGE_VERSION}`,
              name: `Synnax Console v${process.env.PACKAGE_VERSION}`,
              draft: false,
              prerelease: false,
            })
            return id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-12, windows-latest ]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Diff Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changed:
              - "console/**"
              - "pluto/**"
              - "client/ts/**"
              - "freighter/ts/**"
              - ".github/workflows/console.release.yaml"

      - name: Setup pnpm
        if: steps.filter.outputs.changed == 'true'
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node
        if: steps.filter.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Determine OS
        id: os
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            echo "OS=macos" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "macos-12" ]; then
            echo "OS=macos" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "ubuntu-latest" ]; then
            echo "OS=linux" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "OS=windows" >> $GITHUB_ENV
          fi

      - name: Get Server Version
        if: steps.filter.outputs.changed == 'true'
        id: version
        working-directory: ./synnax
        shell: bash
        run: |
          echo "SERVER_VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_ENV
      
      - name: Get Console Version
        id: console-version
        shell: bash
        run: echo "CONSOLE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        working-directory: ./console


      - name: Install Synnax Binary
        if: steps.filter.outputs.changed == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = await import("fs");
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const release = releases.data.find(({ tag_name }) => tag_name === `synnax-v${process.env.SERVER_VERSION}`);
            const asset = release.assets.find(({ name }) => name === `synnax-v${process.env.SERVER_VERSION}-${process.env.OS}`);
            const url = asset.browser_download_url;
            const response = await github.request(`GET /repos/${context.repo.owner}/${context.repo.repo}/releases/assets/${asset.id}`, {
              headers: {
                'Accept': 'application/octet-stream',
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            let name;
            const path = "./console/src-tauri/bin";
            if (process.env.OS === "windows") name = `sy-x86_64-pc-windows-msvc.exe`;
            else if (process.env.OS === "macos") name = `sy-x86_64-apple-darwin`;
            else name = `sy-x86_64-unknown-linux-gnu`;
            const buf = Buffer.from(response.data);
            console.log("Pulled Synnax Binary");
            console.log({
                url,
                name,
                version: process.env.SERVER_VERSION,
                path,
            });
            fs.writeFileSync(`${path}/${name}`, buf);
            fs.chmodSync(`${path}/${name}`, 0o755);

      - name: Install Rust Stable
        if: steps.filter.outputs.changed == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Rust Cache
        if: steps.filter.outputs.changed == 'true'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: console/src-tauri -> target
          key: ${{ runner.os }}

      - name: Turbo Cache
        if: steps.filter.outputs.changed == 'true'
        uses: actions/cache@v3
        with:
          path: .turbo-cache
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install Dependencies on Ubuntu
        if: matrix.platform == 'ubuntu-latest' && steps.filter.outputs.changed == 'true'
        run: >-
          sudo apt-get update &&
          sudo apt-get install -y
          libgtk-3-dev
          libayatana-appindicator3-dev
          libwebkit2gtk-4.0-dev
          webkit2gtk-driver
          xvfb

      - name: Install Dependencies
        if: steps.filter.outputs.changed == 'true'
        run: pnpm i


      - name: Build Pluto
        if: steps.filter.outputs.changed == 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: pnpm build:pluto
      
      - name: Build Drift
        if: steps.filter.outputs.changed == 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: pnpm build:drift

      - name: Build Console
        if: steps.filter.outputs.changed == 'true'
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        working-directory: ./console
        run: pnpm build --debug

      - name: Upload MacoOS Release Asset
        if: steps.filter.outputs.changed == 'true' && matrix.platform == 'macos-12'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/macos/Synnax.app.tar.gz
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/macos/Synnax.app.tar.gz.sig
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/dmg/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64.dmg
      

      - name: Upload Windows Release Asset
        if: steps.filter.outputs.changed == 'true' && matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/msi/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64_en-US.msi
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/msi/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64_en-US.msi.zip
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/msi/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64_en-US.msi.zip.sig
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/nsis/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64-setup.exe
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/nsis/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64-setup.nsis.zip
          gh release upload console-v${{ steps.console-version.outputs.CONSOLE_VERSION }} ./console/src-tauri/target/debug/bundle/nsis/Synnax_${{ steps.console-version.outputs.CONSOLE_VERSION }}_x64-setup.nsis.zip.sig

  publish-release:
    runs-on: ubuntu-latest
    if: needs.create-release.outputs.release_id != ''
    needs: [ create-release, build-tauri ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Publish Release
        if: steps.filter.outputs.changed == 'true'
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id,
                draft: false,
                prerelease: false,
            })

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get Version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        working-directory: ./console

      - name: Add Auto Update JSON File
        id: auto-update-json-file
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const fs = await import("fs");

            const packageVersion = process.env.PACKAGE_VERSION;
            const {
              repo: { repo, owner },
            } = context;

            const baseURL = `https://github.com/${owner}/${repo}/releases/download/console-v${packageVersion}/`;

            const darwinURL = baseURL + "Synnax.app.tar.gz";
            const darwinSig = await github.request(`GET ${darwinURL}.sig`);
            const windowsURL = baseURL + `Synnax_${packageVersion}_x64_en-US.msi.zip`;
            const windowsSig = await github.request(`GET ${windowsURL}.sig`);
            const pub_date = new Date().toISOString().replace(/\.\d{3}Z$/, "Z");
            const ecd = new TextDecoder();

            const data = {
              version: `v${packageVersion}`,
              notes: "Synnax Update",
              pub_date,
              platforms: {
                "darwin-x86_64": {
                  signature: ecd.decode(darwinSig.data),
                  url: darwinURL,
                },
                "linux-x86_64": {
                  signature: darwinSig.data,
                  url: darwinURL,
                },
                "windows-x86_64": {
                  signature: ecd.decode(windowsSig.data),
                  url: windowsURL,
                },
              },
            };

            fs.writeFileSync("console/release-spec.json", JSON.stringify(data, null, 2));

      - name: Commit Auto Update JSON File
        id: commit-auto-update-json-file
        uses: EndBug/add-and-commit@v9
        with:
          add: "*"
          default_author: github_actor
          message: "Auto Update JSON File"
          pull: "--commit --no-edit"
          push: "origin main --force"
