name: "Driver Build"
on:
  push:
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22000

      - name: Build MbedTls
        if: ${{ matrix.platform == 'windows-latest' }}
        shell: bash
        run: |
          Invoke-WebRequest -Uri "https://github.com/Mbed-TLS/mbedtls/releases/download/v3.6.0/mbedtls-3.6.0.tar.bz2" -OutFile "mbedtls-3.6.0.tar.bz2"
          7z e mbedtls-3.6.0.tar.bz2
          7z x mbedtls-3.6.0.tar
          cd mbedtls-3.6.0
          cmake -DGEN_FILES=ON -DENABLE_TESTING=Off .
          make
        working-directory: driver/vendor/mbedtls

      - name: Build Open62541
        shell: bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUA_NAMESPACE_ZERO=FULL -DCMAKE_INSTALL_PREFIX=../out -DUA_ENABLE_ENCRYPTION=MBEDTLS ..
          cmake --build . --config RelWithDebInfo --target install
        working-directory: driver/vendor/open62541/open62541

      - name: Build Driver on Windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: bazel --output_user_root=C:/tmp build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Build Driver on mac
        if: ${{ matrix.platform == 'macos-latest' }}
        run: bazel build --enable_platform_specific_config //driver:driver_main --define ni_mock=true

      - name: Build Driver on ubuntu
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: bazel build --enable_platform_specific_config //driver:driver_main --define ni_mock=true
