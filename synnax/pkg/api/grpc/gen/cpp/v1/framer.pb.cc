// Copyright 2023 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/framer.proto

#include "v1/framer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace api {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR Frame::Frame(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      /*decltype(_impl_.series_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameIteratorRequest::FrameIteratorRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.keys_)*/ {},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      /*decltype(_impl_.range_)*/ nullptr,
      /*decltype(_impl_.span_)*/ ::int64_t{0},
      /*decltype(_impl_.stamp_)*/ ::int64_t{0},
      /*decltype(_impl_.command_)*/ 0,
    } {}
struct FrameIteratorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameIteratorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameIteratorRequestDefaultTypeInternal() {}
  union {
    FrameIteratorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameIteratorRequestDefaultTypeInternal _FrameIteratorRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameIteratorResponse::FrameIteratorResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.frame_)*/ nullptr,
      /*decltype(_impl_.error_)*/ nullptr,
      /*decltype(_impl_.variant_)*/ 0,
      /*decltype(_impl_.command_)*/ 0,
      /*decltype(_impl_.ack_)*/ false,
      /*decltype(_impl_.seq_num_)*/ 0,
      /*decltype(_impl_.node_key_)*/ 0,
    } {}
struct FrameIteratorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameIteratorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameIteratorResponseDefaultTypeInternal() {}
  union {
    FrameIteratorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameIteratorResponseDefaultTypeInternal _FrameIteratorResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameWriterConfig::FrameWriterConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      /*decltype(_impl_.start_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FrameWriterConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameWriterConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameWriterConfigDefaultTypeInternal() {}
  union {
    FrameWriterConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameWriterConfigDefaultTypeInternal _FrameWriterConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameWriterRequest::FrameWriterRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.config_)*/ nullptr,
      /*decltype(_impl_.frame_)*/ nullptr,
      /*decltype(_impl_.command_)*/ 0,
    } {}
struct FrameWriterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameWriterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameWriterRequestDefaultTypeInternal() {}
  union {
    FrameWriterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameWriterRequestDefaultTypeInternal _FrameWriterRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameWriterResponse::FrameWriterResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.error_)*/ nullptr,
      /*decltype(_impl_.command_)*/ 0,
      /*decltype(_impl_.ack_)*/ false,
      /*decltype(_impl_.node_key_)*/ 0,
      /*decltype(_impl_.counter_)*/ 0,
      /*decltype(_impl_.end_)*/ ::int64_t{0},
    } {}
struct FrameWriterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameWriterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameWriterResponseDefaultTypeInternal() {}
  union {
    FrameWriterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameWriterResponseDefaultTypeInternal _FrameWriterResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameStreamerRequest::FrameStreamerRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      /*decltype(_impl_.start_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FrameStreamerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameStreamerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameStreamerRequestDefaultTypeInternal() {}
  union {
    FrameStreamerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameStreamerRequestDefaultTypeInternal _FrameStreamerRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameStreamerResponse::FrameStreamerResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.frame_)*/ nullptr,
      /*decltype(_impl_.error_)*/ nullptr,
    } {}
struct FrameStreamerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameStreamerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameStreamerResponseDefaultTypeInternal() {}
  union {
    FrameStreamerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameStreamerResponseDefaultTypeInternal _FrameStreamerResponse_default_instance_;
}  // namespace v1
}  // namespace api
static ::_pb::Metadata file_level_metadata_v1_2fframer_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_v1_2fframer_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_v1_2fframer_2eproto = nullptr;
const ::uint32_t TableStruct_v1_2fframer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::api::v1::Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::Frame, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::api::v1::Frame, _impl_.series_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_.span_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_.stamp_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorRequest, _impl_.keys_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.variant_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.frame_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.node_key_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.ack_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.seq_num_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameIteratorResponse, _impl_.error_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterConfig, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterConfig, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterRequest, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterRequest, _impl_.config_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterRequest, _impl_.frame_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.ack_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.node_key_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.counter_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameWriterResponse, _impl_.end_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerRequest, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerRequest, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerResponse, _impl_.frame_),
    PROTOBUF_FIELD_OFFSET(::api::v1::FrameStreamerResponse, _impl_.error_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::api::v1::Frame)},
        {10, 23, -1, sizeof(::api::v1::FrameIteratorRequest)},
        {28, 43, -1, sizeof(::api::v1::FrameIteratorResponse)},
        {50, -1, -1, sizeof(::api::v1::FrameWriterConfig)},
        {60, 71, -1, sizeof(::api::v1::FrameWriterRequest)},
        {74, 88, -1, sizeof(::api::v1::FrameWriterResponse)},
        {94, -1, -1, sizeof(::api::v1::FrameStreamerRequest)},
        {104, 114, -1, sizeof(::api::v1::FrameStreamerResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::api::v1::_Frame_default_instance_._instance,
    &::api::v1::_FrameIteratorRequest_default_instance_._instance,
    &::api::v1::_FrameIteratorResponse_default_instance_._instance,
    &::api::v1::_FrameWriterConfig_default_instance_._instance,
    &::api::v1::_FrameWriterRequest_default_instance_._instance,
    &::api::v1::_FrameWriterResponse_default_instance_._instance,
    &::api::v1::_FrameStreamerRequest_default_instance_._instance,
    &::api::v1::_FrameStreamerResponse_default_instance_._instance,
};
const char descriptor_table_protodef_v1_2fframer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017v1/framer.proto\022\006api.v1\032\030ferrors/v1/fe"
    "rrors.proto\032\023telempb/telem.proto\"B\n\005Fram"
    "e\022\022\n\004keys\030\001 \003(\rR\004keys\022%\n\006series\030\002 \003(\0132\r."
    "telem.SeriesR\006series\"\226\001\n\024FrameIteratorRe"
    "quest\022\030\n\007command\030\001 \001(\005R\007command\022\022\n\004span\030"
    "\002 \001(\003R\004span\022&\n\005range\030\003 \001(\0132\020.telem.TimeR"
    "angeR\005range\022\024\n\005stamp\030\004 \001(\003R\005stamp\022\022\n\004key"
    "s\030\005 \003(\rR\004keys\"\346\001\n\025FrameIteratorResponse\022"
    "\030\n\007variant\030\001 \001(\005R\007variant\022\030\n\007command\030\002 \001"
    "(\005R\007command\022#\n\005frame\030\003 \001(\0132\r.api.v1.Fram"
    "eR\005frame\022\031\n\010node_key\030+ \001(\005R\007nodeKey\022\020\n\003a"
    "ck\030\005 \001(\010R\003ack\022\027\n\007seq_num\030\006 \001(\005R\006seqNum\022."
    "\n\005error\030\007 \001(\0132\030.ferrors.v1.ErrorPayloadR"
    "\005error\"=\n\021FrameWriterConfig\022\022\n\004keys\030\001 \003("
    "\rR\004keys\022\024\n\005start\030\002 \001(\003R\005start\"\206\001\n\022FrameW"
    "riterRequest\022\030\n\007command\030\001 \001(\005R\007command\0221"
    "\n\006config\030\002 \001(\0132\031.api.v1.FrameWriterConfi"
    "gR\006config\022#\n\005frame\030\003 \001(\0132\r.api.v1.FrameR"
    "\005frame\"\270\001\n\023FrameWriterResponse\022\030\n\007comman"
    "d\030\001 \001(\005R\007command\022\020\n\003ack\030\002 \001(\010R\003ack\022\031\n\010no"
    "de_key\030\003 \001(\005R\007nodeKey\022\030\n\007counter\030\004 \001(\005R\007"
    "counter\022.\n\005error\030\005 \001(\0132\030.ferrors.v1.Erro"
    "rPayloadR\005error\022\020\n\003end\030\006 \001(\003R\003end\"@\n\024Fra"
    "meStreamerRequest\022\024\n\005start\030\001 \001(\003R\005start\022"
    "\022\n\004keys\030\002 \003(\rR\004keys\"l\n\025FrameStreamerResp"
    "onse\022#\n\005frame\030\001 \001(\0132\r.api.v1.FrameR\005fram"
    "e\022.\n\005error\030\002 \001(\0132\030.ferrors.v1.ErrorPaylo"
    "adR\005error2\361\001\n\014FrameService\022L\n\007Iterate\022\034."
    "api.v1.FrameIteratorRequest\032\035.api.v1.Fra"
    "meIteratorResponse\"\000(\0010\001\022F\n\005Write\022\032.api."
    "v1.FrameWriterRequest\032\033.api.v1.FrameWrit"
    "erResponse\"\000(\0010\001\022K\n\006Stream\022\034.api.v1.Fram"
    "eStreamerRequest\032\035.api.v1.FrameStreamerR"
    "esponse\"\000(\0010\001B\206\001\n\ncom.api.v1B\013FramerProt"
    "oP\001Z2github.com/synnaxlabs/synnax/pkg/ap"
    "i/grpc/v1;apiv1\242\002\003AXX\252\002\006Api.V1\312\002\006Api\\V1\342"
    "\002\022Api\\V1\\GPBMetadata\352\002\007Api::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_v1_2fframer_2eproto_deps[2] =
    {
        &::descriptor_table_ferrors_2fv1_2fferrors_2eproto,
        &::descriptor_table_telempb_2ftelem_2eproto,
};
static ::absl::once_flag descriptor_table_v1_2fframer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_v1_2fframer_2eproto = {
    false,
    false,
    1478,
    descriptor_table_protodef_v1_2fframer_2eproto,
    "v1/framer.proto",
    &descriptor_table_v1_2fframer_2eproto_once,
    descriptor_table_v1_2fframer_2eproto_deps,
    2,
    8,
    schemas,
    file_default_instances,
    TableStruct_v1_2fframer_2eproto::offsets,
    file_level_metadata_v1_2fframer_2eproto,
    file_level_enum_descriptors_v1_2fframer_2eproto,
    file_level_service_descriptors_v1_2fframer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_v1_2fframer_2eproto_getter() {
  return &descriptor_table_v1_2fframer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_v1_2fframer_2eproto(&descriptor_table_v1_2fframer_2eproto);
namespace api {
namespace v1 {
// ===================================================================

class Frame::_Internal {
 public:
};

void Frame::clear_series() {
  _internal_mutable_series()->Clear();
}
Frame::Frame(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.Frame)
}
Frame::Frame(const Frame& from) : ::google::protobuf::Message() {
  Frame* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.series_){from._impl_.series_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:api.v1.Frame)
}
inline void Frame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.series_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Frame::~Frame() {
  // @@protoc_insertion_point(destructor:api.v1.Frame)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Frame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.series_.~RepeatedPtrField();
}
void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.Frame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_mutable_series()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Frame::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Frame::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Frame_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .telem.Series series = 2 [json_name = "series"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Frame, _impl_.series_)}},
    // repeated uint32 keys = 1 [json_name = "keys"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Frame, _impl_.keys_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint32 keys = 1 [json_name = "keys"];
    {PROTOBUF_FIELD_OFFSET(Frame, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated .telem.Series series = 2 [json_name = "series"];
    {PROTOBUF_FIELD_OFFSET(Frame, _impl_.series_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::telem::Series>()},
  }}, {{
  }},
};

::uint8_t* Frame::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.Frame)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated uint32 keys = 1 [json_name = "keys"];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(1, _internal_keys(),
                                                 byte_size, target);
    }
  }

  // repeated .telem.Series series = 2 [json_name = "series"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_series().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.Frame)
  return target;
}

::size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.Frame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 1 [json_name = "keys"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .telem.Series series = 2 [json_name = "series"];
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->_internal_series()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Frame::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::google::protobuf::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.Frame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_series()->MergeFrom(from._internal_series());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.series_.InternalSwap(&other->_impl_.series_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[0]);
}
// ===================================================================

class FrameIteratorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameIteratorRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_._has_bits_);
  static const ::telem::TimeRange& range(const FrameIteratorRequest* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::telem::TimeRange& FrameIteratorRequest::_Internal::range(const FrameIteratorRequest* msg) {
  return *msg->_impl_.range_;
}
void FrameIteratorRequest::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FrameIteratorRequest::FrameIteratorRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameIteratorRequest)
}
FrameIteratorRequest::FrameIteratorRequest(const FrameIteratorRequest& from) : ::google::protobuf::Message() {
  FrameIteratorRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.keys_){from._impl_.keys_},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.range_){nullptr},
      decltype(_impl_.span_){},
      decltype(_impl_.stamp_){},
      decltype(_impl_.command_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.range_ = new ::telem::TimeRange(*from._impl_.range_);
  }
  ::memcpy(&_impl_.span_, &from._impl_.span_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.command_) -
    reinterpret_cast<char*>(&_impl_.span_)) + sizeof(_impl_.command_));

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameIteratorRequest)
}
inline void FrameIteratorRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.keys_){arena},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.range_){nullptr},
      decltype(_impl_.span_){::int64_t{0}},
      decltype(_impl_.stamp_){::int64_t{0}},
      decltype(_impl_.command_){0},
  };
}
FrameIteratorRequest::~FrameIteratorRequest() {
  // @@protoc_insertion_point(destructor:api.v1.FrameIteratorRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameIteratorRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.range_;
}
void FrameIteratorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameIteratorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameIteratorRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  ::memset(&_impl_.span_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.command_) -
      reinterpret_cast<char*>(&_impl_.span_)) + sizeof(_impl_.command_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameIteratorRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> FrameIteratorRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameIteratorRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 command = 1 [json_name = "command"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameIteratorRequest, _impl_.command_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.command_)}},
    // int64 span = 2 [json_name = "span"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FrameIteratorRequest, _impl_.span_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.span_)}},
    // .telem.TimeRange range = 3 [json_name = "range"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.range_)}},
    // int64 stamp = 4 [json_name = "stamp"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FrameIteratorRequest, _impl_.stamp_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.stamp_)}},
    // repeated uint32 keys = 5 [json_name = "keys"];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.keys_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 command = 1 [json_name = "command"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.command_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 span = 2 [json_name = "span"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.span_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .telem.TimeRange range = 3 [json_name = "range"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.range_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 stamp = 4 [json_name = "stamp"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.stamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated uint32 keys = 5 [json_name = "keys"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::telem::TimeRange>()},
  }}, {{
  }},
};

::uint8_t* FrameIteratorRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameIteratorRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_command(), target);
  }

  // int64 span = 2 [json_name = "span"];
  if (this->_internal_span() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_span(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .telem.TimeRange range = 3 [json_name = "range"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // int64 stamp = 4 [json_name = "stamp"];
  if (this->_internal_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_stamp(), target);
  }

  // repeated uint32 keys = 5 [json_name = "keys"];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(5, _internal_keys(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameIteratorRequest)
  return target;
}

::size_t FrameIteratorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameIteratorRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 5 [json_name = "keys"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .telem.TimeRange range = 3 [json_name = "range"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // int64 span = 2 [json_name = "span"];
  if (this->_internal_span() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_span());
  }

  // int64 stamp = 4 [json_name = "stamp"];
  if (this->_internal_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_stamp());
  }

  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameIteratorRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameIteratorRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameIteratorRequest::GetClassData() const { return &_class_data_; }


void FrameIteratorRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameIteratorRequest*>(&to_msg);
  auto& from = static_cast<const FrameIteratorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameIteratorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_range()->::telem::TimeRange::MergeFrom(
        from._internal_range());
  }
  if (from._internal_span() != 0) {
    _this->_internal_set_span(from._internal_span());
  }
  if (from._internal_stamp() != 0) {
    _this->_internal_set_stamp(from._internal_stamp());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameIteratorRequest::CopyFrom(const FrameIteratorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameIteratorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameIteratorRequest::IsInitialized() const {
  return true;
}

void FrameIteratorRequest::InternalSwap(FrameIteratorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.command_)
      + sizeof(FrameIteratorRequest::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(FrameIteratorRequest, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::google::protobuf::Metadata FrameIteratorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[1]);
}
// ===================================================================

class FrameIteratorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameIteratorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_._has_bits_);
  static const ::api::v1::Frame& frame(const FrameIteratorResponse* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ferrors::v1::ErrorPayload& error(const FrameIteratorResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::api::v1::Frame& FrameIteratorResponse::_Internal::frame(const FrameIteratorResponse* msg) {
  return *msg->_impl_.frame_;
}
const ::ferrors::v1::ErrorPayload& FrameIteratorResponse::_Internal::error(const FrameIteratorResponse* msg) {
  return *msg->_impl_.error_;
}
void FrameIteratorResponse::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FrameIteratorResponse::FrameIteratorResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameIteratorResponse)
}
FrameIteratorResponse::FrameIteratorResponse(const FrameIteratorResponse& from) : ::google::protobuf::Message() {
  FrameIteratorResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.variant_){},
      decltype(_impl_.command_){},
      decltype(_impl_.ack_){},
      decltype(_impl_.seq_num_){},
      decltype(_impl_.node_key_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.frame_ = new ::api::v1::Frame(*from._impl_.frame_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.error_ = new ::ferrors::v1::ErrorPayload(*from._impl_.error_);
  }
  ::memcpy(&_impl_.variant_, &from._impl_.variant_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.node_key_) -
    reinterpret_cast<char*>(&_impl_.variant_)) + sizeof(_impl_.node_key_));

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameIteratorResponse)
}
inline void FrameIteratorResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.variant_){0},
      decltype(_impl_.command_){0},
      decltype(_impl_.ack_){false},
      decltype(_impl_.seq_num_){0},
      decltype(_impl_.node_key_){0},
  };
}
FrameIteratorResponse::~FrameIteratorResponse() {
  // @@protoc_insertion_point(destructor:api.v1.FrameIteratorResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameIteratorResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.frame_;
  if (this != internal_default_instance()) delete _impl_.error_;
}
void FrameIteratorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameIteratorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameIteratorResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.frame_ != nullptr);
      _impl_.frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  ::memset(&_impl_.variant_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.node_key_) -
      reinterpret_cast<char*>(&_impl_.variant_)) + sizeof(_impl_.node_key_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameIteratorResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 7> FrameIteratorResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_._has_bits_),
    0, // no _extensions_
    43, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967176,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameIteratorResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 variant = 1 [json_name = "variant"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameIteratorResponse, _impl_.variant_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.variant_)}},
    // int32 command = 2 [json_name = "command"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameIteratorResponse, _impl_.command_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.command_)}},
    // .api.v1.Frame frame = 3 [json_name = "frame"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.frame_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool ack = 5 [json_name = "ack"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FrameIteratorResponse, _impl_.ack_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.ack_)}},
    // int32 seq_num = 6 [json_name = "seqNum"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameIteratorResponse, _impl_.seq_num_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.seq_num_)}},
    // .ferrors.v1.ErrorPayload error = 7 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.error_)}},
  }}, {{
    43, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // int32 variant = 1 [json_name = "variant"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.variant_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 command = 2 [json_name = "command"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.command_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .api.v1.Frame frame = 3 [json_name = "frame"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.frame_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ack = 5 [json_name = "ack"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.ack_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 seq_num = 6 [json_name = "seqNum"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.seq_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ferrors.v1.ErrorPayload error = 7 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.error_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 node_key = 43 [json_name = "nodeKey"];
    {PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.node_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::api::v1::Frame>()},
    {::_pbi::TcParser::GetTable<::ferrors::v1::ErrorPayload>()},
  }}, {{
  }},
};

::uint8_t* FrameIteratorResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameIteratorResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 variant = 1 [json_name = "variant"];
  if (this->_internal_variant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_variant(), target);
  }

  // int32 command = 2 [json_name = "command"];
  if (this->_internal_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_command(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .api.v1.Frame frame = 3 [json_name = "frame"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // bool ack = 5 [json_name = "ack"];
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ack(), target);
  }

  // int32 seq_num = 6 [json_name = "seqNum"];
  if (this->_internal_seq_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_seq_num(), target);
  }

  // .ferrors.v1.ErrorPayload error = 7 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // int32 node_key = 43 [json_name = "nodeKey"];
  if (this->_internal_node_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        43, this->_internal_node_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameIteratorResponse)
  return target;
}

::size_t FrameIteratorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameIteratorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .api.v1.Frame frame = 3 [json_name = "frame"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.frame_);
    }

    // .ferrors.v1.ErrorPayload error = 7 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  // int32 variant = 1 [json_name = "variant"];
  if (this->_internal_variant() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_variant());
  }

  // int32 command = 2 [json_name = "command"];
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());
  }

  // bool ack = 5 [json_name = "ack"];
  if (this->_internal_ack() != 0) {
    total_size += 2;
  }

  // int32 seq_num = 6 [json_name = "seqNum"];
  if (this->_internal_seq_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seq_num());
  }

  // int32 node_key = 43 [json_name = "nodeKey"];
  if (this->_internal_node_key() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_node_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameIteratorResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameIteratorResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameIteratorResponse::GetClassData() const { return &_class_data_; }


void FrameIteratorResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameIteratorResponse*>(&to_msg);
  auto& from = static_cast<const FrameIteratorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameIteratorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_frame()->::api::v1::Frame::MergeFrom(
          from._internal_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::ferrors::v1::ErrorPayload::MergeFrom(
          from._internal_error());
    }
  }
  if (from._internal_variant() != 0) {
    _this->_internal_set_variant(from._internal_variant());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  if (from._internal_seq_num() != 0) {
    _this->_internal_set_seq_num(from._internal_seq_num());
  }
  if (from._internal_node_key() != 0) {
    _this->_internal_set_node_key(from._internal_node_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameIteratorResponse::CopyFrom(const FrameIteratorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameIteratorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameIteratorResponse::IsInitialized() const {
  return true;
}

void FrameIteratorResponse::InternalSwap(FrameIteratorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.node_key_)
      + sizeof(FrameIteratorResponse::_impl_.node_key_)
      - PROTOBUF_FIELD_OFFSET(FrameIteratorResponse, _impl_.frame_)>(
          reinterpret_cast<char*>(&_impl_.frame_),
          reinterpret_cast<char*>(&other->_impl_.frame_));
}

::google::protobuf::Metadata FrameIteratorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[2]);
}
// ===================================================================

class FrameWriterConfig::_Internal {
 public:
};

FrameWriterConfig::FrameWriterConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameWriterConfig)
}
FrameWriterConfig::FrameWriterConfig(const FrameWriterConfig& from) : ::google::protobuf::Message() {
  FrameWriterConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.start_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.start_ = from._impl_.start_;

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameWriterConfig)
}
inline void FrameWriterConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.start_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FrameWriterConfig::~FrameWriterConfig() {
  // @@protoc_insertion_point(destructor:api.v1.FrameWriterConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameWriterConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
}
void FrameWriterConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameWriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameWriterConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _impl_.start_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameWriterConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FrameWriterConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FrameWriterConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 start = 2 [json_name = "start"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FrameWriterConfig, _impl_.start_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterConfig, _impl_.start_)}},
    // repeated uint32 keys = 1 [json_name = "keys"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterConfig, _impl_.keys_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint32 keys = 1 [json_name = "keys"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterConfig, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // int64 start = 2 [json_name = "start"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterConfig, _impl_.start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FrameWriterConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameWriterConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated uint32 keys = 1 [json_name = "keys"];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(1, _internal_keys(),
                                                 byte_size, target);
    }
  }

  // int64 start = 2 [json_name = "start"];
  if (this->_internal_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameWriterConfig)
  return target;
}

::size_t FrameWriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameWriterConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 1 [json_name = "keys"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int64 start = 2 [json_name = "start"];
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameWriterConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameWriterConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameWriterConfig::GetClassData() const { return &_class_data_; }


void FrameWriterConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameWriterConfig*>(&to_msg);
  auto& from = static_cast<const FrameWriterConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameWriterConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameWriterConfig::CopyFrom(const FrameWriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameWriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameWriterConfig::IsInitialized() const {
  return true;
}

void FrameWriterConfig::InternalSwap(FrameWriterConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
        swap(_impl_.start_, other->_impl_.start_);
}

::google::protobuf::Metadata FrameWriterConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[3]);
}
// ===================================================================

class FrameWriterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameWriterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_._has_bits_);
  static const ::api::v1::FrameWriterConfig& config(const FrameWriterRequest* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::api::v1::Frame& frame(const FrameWriterRequest* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::api::v1::FrameWriterConfig& FrameWriterRequest::_Internal::config(const FrameWriterRequest* msg) {
  return *msg->_impl_.config_;
}
const ::api::v1::Frame& FrameWriterRequest::_Internal::frame(const FrameWriterRequest* msg) {
  return *msg->_impl_.frame_;
}
FrameWriterRequest::FrameWriterRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameWriterRequest)
}
FrameWriterRequest::FrameWriterRequest(const FrameWriterRequest& from) : ::google::protobuf::Message() {
  FrameWriterRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.config_){nullptr},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.command_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.config_ = new ::api::v1::FrameWriterConfig(*from._impl_.config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.frame_ = new ::api::v1::Frame(*from._impl_.frame_);
  }
  _this->_impl_.command_ = from._impl_.command_;

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameWriterRequest)
}
inline void FrameWriterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.config_){nullptr},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.command_){0},
  };
}
FrameWriterRequest::~FrameWriterRequest() {
  // @@protoc_insertion_point(destructor:api.v1.FrameWriterRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameWriterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.config_;
  if (this != internal_default_instance()) delete _impl_.frame_;
}
void FrameWriterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameWriterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameWriterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.config_ != nullptr);
      _impl_.config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.frame_ != nullptr);
      _impl_.frame_->Clear();
    }
  }
  _impl_.command_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameWriterRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> FrameWriterRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameWriterRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 command = 1 [json_name = "command"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameWriterRequest, _impl_.command_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.command_)}},
    // .api.v1.FrameWriterConfig config = 2 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.config_)}},
    // .api.v1.Frame frame = 3 [json_name = "frame"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.frame_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 command = 1 [json_name = "command"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.command_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .api.v1.FrameWriterConfig config = 2 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .api.v1.Frame frame = 3 [json_name = "frame"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.frame_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::api::v1::FrameWriterConfig>()},
    {::_pbi::TcParser::GetTable<::api::v1::Frame>()},
  }}, {{
  }},
};

::uint8_t* FrameWriterRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameWriterRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_command(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .api.v1.FrameWriterConfig config = 2 [json_name = "config"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .api.v1.Frame frame = 3 [json_name = "frame"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameWriterRequest)
  return target;
}

::size_t FrameWriterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameWriterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .api.v1.FrameWriterConfig config = 2 [json_name = "config"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.config_);
    }

    // .api.v1.Frame frame = 3 [json_name = "frame"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.frame_);
    }

  }
  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameWriterRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameWriterRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameWriterRequest::GetClassData() const { return &_class_data_; }


void FrameWriterRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameWriterRequest*>(&to_msg);
  auto& from = static_cast<const FrameWriterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameWriterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_config()->::api::v1::FrameWriterConfig::MergeFrom(
          from._internal_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_frame()->::api::v1::Frame::MergeFrom(
          from._internal_frame());
    }
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameWriterRequest::CopyFrom(const FrameWriterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameWriterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameWriterRequest::IsInitialized() const {
  return true;
}

void FrameWriterRequest::InternalSwap(FrameWriterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.command_)
      + sizeof(FrameWriterRequest::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(FrameWriterRequest, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::google::protobuf::Metadata FrameWriterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[4]);
}
// ===================================================================

class FrameWriterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameWriterResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_._has_bits_);
  static const ::ferrors::v1::ErrorPayload& error(const FrameWriterResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ferrors::v1::ErrorPayload& FrameWriterResponse::_Internal::error(const FrameWriterResponse* msg) {
  return *msg->_impl_.error_;
}
void FrameWriterResponse::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FrameWriterResponse::FrameWriterResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameWriterResponse)
}
FrameWriterResponse::FrameWriterResponse(const FrameWriterResponse& from) : ::google::protobuf::Message() {
  FrameWriterResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.command_){},
      decltype(_impl_.ack_){},
      decltype(_impl_.node_key_){},
      decltype(_impl_.counter_){},
      decltype(_impl_.end_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.error_ = new ::ferrors::v1::ErrorPayload(*from._impl_.error_);
  }
  ::memcpy(&_impl_.command_, &from._impl_.command_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.end_));

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameWriterResponse)
}
inline void FrameWriterResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_){nullptr},
      decltype(_impl_.command_){0},
      decltype(_impl_.ack_){false},
      decltype(_impl_.node_key_){0},
      decltype(_impl_.counter_){0},
      decltype(_impl_.end_){::int64_t{0}},
  };
}
FrameWriterResponse::~FrameWriterResponse() {
  // @@protoc_insertion_point(destructor:api.v1.FrameWriterResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameWriterResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}
void FrameWriterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameWriterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameWriterResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.error_ != nullptr);
    _impl_.error_->Clear();
  }
  ::memset(&_impl_.command_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.end_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameWriterResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> FrameWriterResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameWriterResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 command = 1 [json_name = "command"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameWriterResponse, _impl_.command_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.command_)}},
    // bool ack = 2 [json_name = "ack"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FrameWriterResponse, _impl_.ack_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.ack_)}},
    // int32 node_key = 3 [json_name = "nodeKey"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameWriterResponse, _impl_.node_key_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.node_key_)}},
    // int32 counter = 4 [json_name = "counter"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FrameWriterResponse, _impl_.counter_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.counter_)}},
    // .ferrors.v1.ErrorPayload error = 5 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.error_)}},
    // int64 end = 6 [json_name = "end"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FrameWriterResponse, _impl_.end_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.end_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 command = 1 [json_name = "command"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.command_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool ack = 2 [json_name = "ack"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.ack_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 node_key = 3 [json_name = "nodeKey"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.node_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 counter = 4 [json_name = "counter"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.counter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ferrors.v1.ErrorPayload error = 5 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.error_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 end = 6 [json_name = "end"];
    {PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.end_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ferrors::v1::ErrorPayload>()},
  }}, {{
  }},
};

::uint8_t* FrameWriterResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameWriterResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_command(), target);
  }

  // bool ack = 2 [json_name = "ack"];
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_ack(), target);
  }

  // int32 node_key = 3 [json_name = "nodeKey"];
  if (this->_internal_node_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_node_key(), target);
  }

  // int32 counter = 4 [json_name = "counter"];
  if (this->_internal_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_counter(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ferrors.v1.ErrorPayload error = 5 [json_name = "error"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // int64 end = 6 [json_name = "end"];
  if (this->_internal_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameWriterResponse)
  return target;
}

::size_t FrameWriterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameWriterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ferrors.v1.ErrorPayload error = 5 [json_name = "error"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // int32 command = 1 [json_name = "command"];
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());
  }

  // bool ack = 2 [json_name = "ack"];
  if (this->_internal_ack() != 0) {
    total_size += 2;
  }

  // int32 node_key = 3 [json_name = "nodeKey"];
  if (this->_internal_node_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_node_key());
  }

  // int32 counter = 4 [json_name = "counter"];
  if (this->_internal_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_counter());
  }

  // int64 end = 6 [json_name = "end"];
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameWriterResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameWriterResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameWriterResponse::GetClassData() const { return &_class_data_; }


void FrameWriterResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameWriterResponse*>(&to_msg);
  auto& from = static_cast<const FrameWriterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameWriterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_error()->::ferrors::v1::ErrorPayload::MergeFrom(
        from._internal_error());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  if (from._internal_node_key() != 0) {
    _this->_internal_set_node_key(from._internal_node_key());
  }
  if (from._internal_counter() != 0) {
    _this->_internal_set_counter(from._internal_counter());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameWriterResponse::CopyFrom(const FrameWriterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameWriterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameWriterResponse::IsInitialized() const {
  return true;
}

void FrameWriterResponse::InternalSwap(FrameWriterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.end_)
      + sizeof(FrameWriterResponse::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(FrameWriterResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::google::protobuf::Metadata FrameWriterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[5]);
}
// ===================================================================

class FrameStreamerRequest::_Internal {
 public:
};

FrameStreamerRequest::FrameStreamerRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameStreamerRequest)
}
FrameStreamerRequest::FrameStreamerRequest(const FrameStreamerRequest& from) : ::google::protobuf::Message() {
  FrameStreamerRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.start_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.start_ = from._impl_.start_;

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameStreamerRequest)
}
inline void FrameStreamerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      /* _impl_._keys_cached_byte_size_ = */ {0},
      decltype(_impl_.start_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FrameStreamerRequest::~FrameStreamerRequest() {
  // @@protoc_insertion_point(destructor:api.v1.FrameStreamerRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameStreamerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
}
void FrameStreamerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameStreamerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameStreamerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _impl_.start_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameStreamerRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FrameStreamerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FrameStreamerRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated uint32 keys = 2 [json_name = "keys"];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FrameStreamerRequest, _impl_.keys_)}},
    // int64 start = 1 [json_name = "start"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FrameStreamerRequest, _impl_.start_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrameStreamerRequest, _impl_.start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 start = 1 [json_name = "start"];
    {PROTOBUF_FIELD_OFFSET(FrameStreamerRequest, _impl_.start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated uint32 keys = 2 [json_name = "keys"];
    {PROTOBUF_FIELD_OFFSET(FrameStreamerRequest, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FrameStreamerRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameStreamerRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_start(), target);
  }

  // repeated uint32 keys = 2 [json_name = "keys"];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_keys(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameStreamerRequest)
  return target;
}

::size_t FrameStreamerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameStreamerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 2 [json_name = "keys"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int64 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameStreamerRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameStreamerRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameStreamerRequest::GetClassData() const { return &_class_data_; }


void FrameStreamerRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameStreamerRequest*>(&to_msg);
  auto& from = static_cast<const FrameStreamerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameStreamerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameStreamerRequest::CopyFrom(const FrameStreamerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameStreamerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameStreamerRequest::IsInitialized() const {
  return true;
}

void FrameStreamerRequest::InternalSwap(FrameStreamerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
        swap(_impl_.start_, other->_impl_.start_);
}

::google::protobuf::Metadata FrameStreamerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[6]);
}
// ===================================================================

class FrameStreamerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameStreamerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_._has_bits_);
  static const ::api::v1::Frame& frame(const FrameStreamerResponse* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ferrors::v1::ErrorPayload& error(const FrameStreamerResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::api::v1::Frame& FrameStreamerResponse::_Internal::frame(const FrameStreamerResponse* msg) {
  return *msg->_impl_.frame_;
}
const ::ferrors::v1::ErrorPayload& FrameStreamerResponse::_Internal::error(const FrameStreamerResponse* msg) {
  return *msg->_impl_.error_;
}
void FrameStreamerResponse::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FrameStreamerResponse::FrameStreamerResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.v1.FrameStreamerResponse)
}
FrameStreamerResponse::FrameStreamerResponse(const FrameStreamerResponse& from) : ::google::protobuf::Message() {
  FrameStreamerResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.error_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.frame_ = new ::api::v1::Frame(*from._impl_.frame_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.error_ = new ::ferrors::v1::ErrorPayload(*from._impl_.error_);
  }

  // @@protoc_insertion_point(copy_constructor:api.v1.FrameStreamerResponse)
}
inline void FrameStreamerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frame_){nullptr},
      decltype(_impl_.error_){nullptr},
  };
}
FrameStreamerResponse::~FrameStreamerResponse() {
  // @@protoc_insertion_point(destructor:api.v1.FrameStreamerResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameStreamerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.frame_;
  if (this != internal_default_instance()) delete _impl_.error_;
}
void FrameStreamerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameStreamerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.v1.FrameStreamerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.frame_ != nullptr);
      _impl_.frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameStreamerResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> FrameStreamerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameStreamerResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .ferrors.v1.ErrorPayload error = 2 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.error_)}},
    // .api.v1.Frame frame = 1 [json_name = "frame"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.frame_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .api.v1.Frame frame = 1 [json_name = "frame"];
    {PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.frame_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ferrors.v1.ErrorPayload error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.error_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::api::v1::Frame>()},
    {::_pbi::TcParser::GetTable<::ferrors::v1::ErrorPayload>()},
  }}, {{
  }},
};

::uint8_t* FrameStreamerResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.v1.FrameStreamerResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .api.v1.Frame frame = 1 [json_name = "frame"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // .ferrors.v1.ErrorPayload error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.v1.FrameStreamerResponse)
  return target;
}

::size_t FrameStreamerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.v1.FrameStreamerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .api.v1.Frame frame = 1 [json_name = "frame"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.frame_);
    }

    // .ferrors.v1.ErrorPayload error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameStreamerResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameStreamerResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameStreamerResponse::GetClassData() const { return &_class_data_; }


void FrameStreamerResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameStreamerResponse*>(&to_msg);
  auto& from = static_cast<const FrameStreamerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:api.v1.FrameStreamerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_frame()->::api::v1::Frame::MergeFrom(
          from._internal_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::ferrors::v1::ErrorPayload::MergeFrom(
          from._internal_error());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameStreamerResponse::CopyFrom(const FrameStreamerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.v1.FrameStreamerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameStreamerResponse::IsInitialized() const {
  return true;
}

void FrameStreamerResponse::InternalSwap(FrameStreamerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.error_)
      + sizeof(FrameStreamerResponse::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(FrameStreamerResponse, _impl_.frame_)>(
          reinterpret_cast<char*>(&_impl_.frame_),
          reinterpret_cast<char*>(&other->_impl_.frame_));
}

::google::protobuf::Metadata FrameStreamerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_v1_2fframer_2eproto_getter, &descriptor_table_v1_2fframer_2eproto_once,
      file_level_metadata_v1_2fframer_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
