// Copyright 2023 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fchannel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fchannel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2fchannel_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fchannel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_v1_2fchannel_2eproto;
namespace api {
namespace v1 {
class Channel;
struct ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelCreateRequest;
struct ChannelCreateRequestDefaultTypeInternal;
extern ChannelCreateRequestDefaultTypeInternal _ChannelCreateRequest_default_instance_;
class ChannelCreateResponse;
struct ChannelCreateResponseDefaultTypeInternal;
extern ChannelCreateResponseDefaultTypeInternal _ChannelCreateResponse_default_instance_;
class ChannelRetrieveRequest;
struct ChannelRetrieveRequestDefaultTypeInternal;
extern ChannelRetrieveRequestDefaultTypeInternal _ChannelRetrieveRequest_default_instance_;
class ChannelRetrieveResponse;
struct ChannelRetrieveResponseDefaultTypeInternal;
extern ChannelRetrieveResponseDefaultTypeInternal _ChannelRetrieveResponse_default_instance_;
}  // namespace v1
}  // namespace api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace api {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Channel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Channel(::google::protobuf::internal::ConstantInitialized);

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Channel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Channel& from) {
    Channel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.Channel";
  }
  protected:
  explicit Channel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDataTypeFieldNumber = 5,
    kKeyFieldNumber = 1,
    kLeaseholderFieldNumber = 3,
    kRateFieldNumber = 4,
    kIsIndexFieldNumber = 7,
    kDensityFieldNumber = 6,
    kIndexFieldNumber = 8,
  };
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string data_type = 5 [json_name = "dataType"];
  void clear_data_type() ;
  const std::string& data_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_type(Arg_&& arg, Args_... args);
  std::string* mutable_data_type();
  PROTOBUF_NODISCARD std::string* release_data_type();
  void set_allocated_data_type(std::string* ptr);

  private:
  const std::string& _internal_data_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_type(
      const std::string& value);
  std::string* _internal_mutable_data_type();

  public:
  // uint32 key = 1 [json_name = "key"];
  void clear_key() ;
  ::uint32_t key() const;
  void set_key(::uint32_t value);

  private:
  ::uint32_t _internal_key() const;
  void _internal_set_key(::uint32_t value);

  public:
  // uint32 leaseholder = 3 [json_name = "leaseholder"];
  void clear_leaseholder() ;
  ::uint32_t leaseholder() const;
  void set_leaseholder(::uint32_t value);

  private:
  ::uint32_t _internal_leaseholder() const;
  void _internal_set_leaseholder(::uint32_t value);

  public:
  // float rate = 4 [json_name = "rate"];
  void clear_rate() ;
  float rate() const;
  void set_rate(float value);

  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);

  public:
  // bool is_index = 7 [json_name = "isIndex"];
  void clear_is_index() ;
  bool is_index() const;
  void set_is_index(bool value);

  private:
  bool _internal_is_index() const;
  void _internal_set_is_index(bool value);

  public:
  // int64 density = 6 [json_name = "density"];
  void clear_density() ;
  ::int64_t density() const;
  void set_density(::int64_t value);

  private:
  ::int64_t _internal_density() const;
  void _internal_set_density(::int64_t value);

  public:
  // uint32 index = 8 [json_name = "index"];
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:api.v1.Channel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr data_type_;
    ::uint32_t key_;
    ::uint32_t leaseholder_;
    float rate_;
    bool is_index_;
    ::int64_t density_;
    ::uint32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fchannel_2eproto;
};// -------------------------------------------------------------------

class ChannelRetrieveRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.ChannelRetrieveRequest) */ {
 public:
  inline ChannelRetrieveRequest() : ChannelRetrieveRequest(nullptr) {}
  ~ChannelRetrieveRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelRetrieveRequest(::google::protobuf::internal::ConstantInitialized);

  ChannelRetrieveRequest(const ChannelRetrieveRequest& from);
  ChannelRetrieveRequest(ChannelRetrieveRequest&& from) noexcept
    : ChannelRetrieveRequest() {
    *this = ::std::move(from);
  }

  inline ChannelRetrieveRequest& operator=(const ChannelRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelRetrieveRequest& operator=(ChannelRetrieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelRetrieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelRetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelRetrieveRequest*>(
               &_ChannelRetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelRetrieveRequest& a, ChannelRetrieveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelRetrieveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelRetrieveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelRetrieveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelRetrieveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelRetrieveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChannelRetrieveRequest& from) {
    ChannelRetrieveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRetrieveRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.ChannelRetrieveRequest";
  }
  protected:
  explicit ChannelRetrieveRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kNamesFieldNumber = 3,
    kSearchFieldNumber = 4,
    kNodeKeyFieldNumber = 1,
  };
  // repeated uint32 keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  ::uint32_t keys(int index) const;
  void set_keys(int index, ::uint32_t value);
  void add_keys(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& keys() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_keys() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_keys();

  public:
  // repeated string names = 3 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // string search = 4 [json_name = "search"];
  void clear_search() ;
  const std::string& search() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_search(Arg_&& arg, Args_... args);
  std::string* mutable_search();
  PROTOBUF_NODISCARD std::string* release_search();
  void set_allocated_search(std::string* ptr);

  private:
  const std::string& _internal_search() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search(
      const std::string& value);
  std::string* _internal_mutable_search();

  public:
  // uint32 node_key = 1 [json_name = "nodeKey"];
  void clear_node_key() ;
  ::uint32_t node_key() const;
  void set_node_key(::uint32_t value);

  private:
  ::uint32_t _internal_node_key() const;
  void _internal_set_node_key(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:api.v1.ChannelRetrieveRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::uint32_t> keys_;
    mutable ::google::protobuf::internal::CachedSize _keys_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> names_;
    ::google::protobuf::internal::ArenaStringPtr search_;
    ::uint32_t node_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fchannel_2eproto;
};// -------------------------------------------------------------------

class ChannelRetrieveResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.ChannelRetrieveResponse) */ {
 public:
  inline ChannelRetrieveResponse() : ChannelRetrieveResponse(nullptr) {}
  ~ChannelRetrieveResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelRetrieveResponse(::google::protobuf::internal::ConstantInitialized);

  ChannelRetrieveResponse(const ChannelRetrieveResponse& from);
  ChannelRetrieveResponse(ChannelRetrieveResponse&& from) noexcept
    : ChannelRetrieveResponse() {
    *this = ::std::move(from);
  }

  inline ChannelRetrieveResponse& operator=(const ChannelRetrieveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelRetrieveResponse& operator=(ChannelRetrieveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelRetrieveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelRetrieveResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelRetrieveResponse*>(
               &_ChannelRetrieveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelRetrieveResponse& a, ChannelRetrieveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelRetrieveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelRetrieveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelRetrieveResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelRetrieveResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelRetrieveResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChannelRetrieveResponse& from) {
    ChannelRetrieveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRetrieveResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.ChannelRetrieveResponse";
  }
  protected:
  explicit ChannelRetrieveResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .api.v1.Channel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::api::v1::Channel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
      mutable_channels();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>& _internal_channels() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Channel>* _internal_mutable_channels();
  public:
  const ::api::v1::Channel& channels(int index) const;
  ::api::v1::Channel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
      channels() const;
  // @@protoc_insertion_point(class_scope:api.v1.ChannelRetrieveResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Channel > channels_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fchannel_2eproto;
};// -------------------------------------------------------------------

class ChannelCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.ChannelCreateRequest) */ {
 public:
  inline ChannelCreateRequest() : ChannelCreateRequest(nullptr) {}
  ~ChannelCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelCreateRequest(::google::protobuf::internal::ConstantInitialized);

  ChannelCreateRequest(const ChannelCreateRequest& from);
  ChannelCreateRequest(ChannelCreateRequest&& from) noexcept
    : ChannelCreateRequest() {
    *this = ::std::move(from);
  }

  inline ChannelCreateRequest& operator=(const ChannelCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelCreateRequest& operator=(ChannelCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelCreateRequest*>(
               &_ChannelCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelCreateRequest& a, ChannelCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelCreateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelCreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelCreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChannelCreateRequest& from) {
    ChannelCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelCreateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.ChannelCreateRequest";
  }
  protected:
  explicit ChannelCreateRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .api.v1.Channel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::api::v1::Channel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
      mutable_channels();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>& _internal_channels() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Channel>* _internal_mutable_channels();
  public:
  const ::api::v1::Channel& channels(int index) const;
  ::api::v1::Channel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
      channels() const;
  // @@protoc_insertion_point(class_scope:api.v1.ChannelCreateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Channel > channels_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fchannel_2eproto;
};// -------------------------------------------------------------------

class ChannelCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.ChannelCreateResponse) */ {
 public:
  inline ChannelCreateResponse() : ChannelCreateResponse(nullptr) {}
  ~ChannelCreateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelCreateResponse(::google::protobuf::internal::ConstantInitialized);

  ChannelCreateResponse(const ChannelCreateResponse& from);
  ChannelCreateResponse(ChannelCreateResponse&& from) noexcept
    : ChannelCreateResponse() {
    *this = ::std::move(from);
  }

  inline ChannelCreateResponse& operator=(const ChannelCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelCreateResponse& operator=(ChannelCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelCreateResponse*>(
               &_ChannelCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChannelCreateResponse& a, ChannelCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelCreateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelCreateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelCreateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelCreateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChannelCreateResponse& from) {
    ChannelCreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelCreateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.ChannelCreateResponse";
  }
  protected:
  explicit ChannelCreateResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .api.v1.Channel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::api::v1::Channel* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
      mutable_channels();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>& _internal_channels() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Channel>* _internal_mutable_channels();
  public:
  const ::api::v1::Channel& channels(int index) const;
  ::api::v1::Channel* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
      channels() const;
  // @@protoc_insertion_point(class_scope:api.v1.ChannelCreateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Channel > channels_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2fchannel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Channel

// uint32 key = 1 [json_name = "key"];
inline void Channel::clear_key() {
  _impl_.key_ = 0u;
}
inline ::uint32_t Channel::key() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.key)
  return _internal_key();
}
inline void Channel::set_key(::uint32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.key)
}
inline ::uint32_t Channel::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_;
}
inline void Channel::_internal_set_key(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_ = value;
}

// string name = 2 [json_name = "name"];
inline void Channel::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Channel::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.Channel.name)
}
inline std::string* Channel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:api.v1.Channel.name)
  return _s;
}
inline const std::string& Channel::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Channel::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Channel::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.Channel.name)
  return _impl_.name_.Release();
}
inline void Channel::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.Channel.name)
}

// uint32 leaseholder = 3 [json_name = "leaseholder"];
inline void Channel::clear_leaseholder() {
  _impl_.leaseholder_ = 0u;
}
inline ::uint32_t Channel::leaseholder() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.leaseholder)
  return _internal_leaseholder();
}
inline void Channel::set_leaseholder(::uint32_t value) {
  _internal_set_leaseholder(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.leaseholder)
}
inline ::uint32_t Channel::_internal_leaseholder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaseholder_;
}
inline void Channel::_internal_set_leaseholder(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leaseholder_ = value;
}

// float rate = 4 [json_name = "rate"];
inline void Channel::clear_rate() {
  _impl_.rate_ = 0;
}
inline float Channel::rate() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.rate)
  return _internal_rate();
}
inline void Channel::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.rate)
}
inline float Channel::_internal_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rate_;
}
inline void Channel::_internal_set_rate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rate_ = value;
}

// string data_type = 5 [json_name = "dataType"];
inline void Channel::clear_data_type() {
  _impl_.data_type_.ClearToEmpty();
}
inline const std::string& Channel::data_type() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.data_type)
  return _internal_data_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Channel::set_data_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.Channel.data_type)
}
inline std::string* Channel::mutable_data_type() {
  std::string* _s = _internal_mutable_data_type();
  // @@protoc_insertion_point(field_mutable:api.v1.Channel.data_type)
  return _s;
}
inline const std::string& Channel::_internal_data_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_type_.Get();
}
inline void Channel::_internal_set_data_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Channel::_internal_mutable_data_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_type_.Mutable( GetArenaForAllocation());
}
inline std::string* Channel::release_data_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.Channel.data_type)
  return _impl_.data_type_.Release();
}
inline void Channel::set_allocated_data_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_type_.IsDefault()) {
          _impl_.data_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.Channel.data_type)
}

// int64 density = 6 [json_name = "density"];
inline void Channel::clear_density() {
  _impl_.density_ = ::int64_t{0};
}
inline ::int64_t Channel::density() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.density)
  return _internal_density();
}
inline void Channel::set_density(::int64_t value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.density)
}
inline ::int64_t Channel::_internal_density() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.density_;
}
inline void Channel::_internal_set_density(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.density_ = value;
}

// bool is_index = 7 [json_name = "isIndex"];
inline void Channel::clear_is_index() {
  _impl_.is_index_ = false;
}
inline bool Channel::is_index() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.is_index)
  return _internal_is_index();
}
inline void Channel::set_is_index(bool value) {
  _internal_set_is_index(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.is_index)
}
inline bool Channel::_internal_is_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_index_;
}
inline void Channel::_internal_set_is_index(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_index_ = value;
}

// uint32 index = 8 [json_name = "index"];
inline void Channel::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t Channel::index() const {
  // @@protoc_insertion_point(field_get:api.v1.Channel.index)
  return _internal_index();
}
inline void Channel::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:api.v1.Channel.index)
}
inline ::uint32_t Channel::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Channel::_internal_set_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// ChannelRetrieveRequest

// uint32 node_key = 1 [json_name = "nodeKey"];
inline void ChannelRetrieveRequest::clear_node_key() {
  _impl_.node_key_ = 0u;
}
inline ::uint32_t ChannelRetrieveRequest::node_key() const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelRetrieveRequest.node_key)
  return _internal_node_key();
}
inline void ChannelRetrieveRequest::set_node_key(::uint32_t value) {
  _internal_set_node_key(value);
  // @@protoc_insertion_point(field_set:api.v1.ChannelRetrieveRequest.node_key)
}
inline ::uint32_t ChannelRetrieveRequest::_internal_node_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_key_;
}
inline void ChannelRetrieveRequest::_internal_set_node_key(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.node_key_ = value;
}

// repeated uint32 keys = 2 [json_name = "keys"];
inline int ChannelRetrieveRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int ChannelRetrieveRequest::keys_size() const {
  return _internal_keys_size();
}
inline void ChannelRetrieveRequest::clear_keys() {
  _internal_mutable_keys()->Clear();
}
inline ::uint32_t ChannelRetrieveRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelRetrieveRequest.keys)
  return _internal_keys().Get(index);
}
inline void ChannelRetrieveRequest::set_keys(int index, ::uint32_t value) {
  _internal_mutable_keys()->Set(index, value);
  // @@protoc_insertion_point(field_set:api.v1.ChannelRetrieveRequest.keys)
}
inline void ChannelRetrieveRequest::add_keys(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add(value);
  // @@protoc_insertion_point(field_add:api.v1.ChannelRetrieveRequest.keys)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ChannelRetrieveRequest::keys() const {
  // @@protoc_insertion_point(field_list:api.v1.ChannelRetrieveRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ChannelRetrieveRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ChannelRetrieveRequest.keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_keys();
}

inline const ::google::protobuf::RepeatedField<::uint32_t>& ChannelRetrieveRequest::_internal_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ChannelRetrieveRequest::_internal_mutable_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.keys_;
}

// repeated string names = 3 [json_name = "names"];
inline int ChannelRetrieveRequest::_internal_names_size() const {
  return _internal_names().size();
}
inline int ChannelRetrieveRequest::names_size() const {
  return _internal_names_size();
}
inline void ChannelRetrieveRequest::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* ChannelRetrieveRequest::add_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:api.v1.ChannelRetrieveRequest.names)
  return _s;
}
inline const std::string& ChannelRetrieveRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelRetrieveRequest.names)
  return _internal_names().Get(index);
}
inline std::string* ChannelRetrieveRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ChannelRetrieveRequest.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void ChannelRetrieveRequest::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::add_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::add_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::add_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.v1.ChannelRetrieveRequest.names)
}
inline void ChannelRetrieveRequest::add_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:api.v1.ChannelRetrieveRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChannelRetrieveRequest::names() const {
  // @@protoc_insertion_point(field_list:api.v1.ChannelRetrieveRequest.names)
  return _internal_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ChannelRetrieveRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ChannelRetrieveRequest.names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChannelRetrieveRequest::_internal_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChannelRetrieveRequest::_internal_mutable_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.names_;
}

// string search = 4 [json_name = "search"];
inline void ChannelRetrieveRequest::clear_search() {
  _impl_.search_.ClearToEmpty();
}
inline const std::string& ChannelRetrieveRequest::search() const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelRetrieveRequest.search)
  return _internal_search();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelRetrieveRequest::set_search(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.search_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.ChannelRetrieveRequest.search)
}
inline std::string* ChannelRetrieveRequest::mutable_search() {
  std::string* _s = _internal_mutable_search();
  // @@protoc_insertion_point(field_mutable:api.v1.ChannelRetrieveRequest.search)
  return _s;
}
inline const std::string& ChannelRetrieveRequest::_internal_search() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.search_.Get();
}
inline void ChannelRetrieveRequest::_internal_set_search(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.search_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelRetrieveRequest::_internal_mutable_search() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.search_.Mutable( GetArenaForAllocation());
}
inline std::string* ChannelRetrieveRequest::release_search() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.ChannelRetrieveRequest.search)
  return _impl_.search_.Release();
}
inline void ChannelRetrieveRequest::set_allocated_search(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.search_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.search_.IsDefault()) {
          _impl_.search_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.ChannelRetrieveRequest.search)
}

// -------------------------------------------------------------------

// ChannelRetrieveResponse

// repeated .api.v1.Channel channels = 1 [json_name = "channels"];
inline int ChannelRetrieveResponse::_internal_channels_size() const {
  return _internal_channels().size();
}
inline int ChannelRetrieveResponse::channels_size() const {
  return _internal_channels_size();
}
inline void ChannelRetrieveResponse::clear_channels() {
  _internal_mutable_channels()->Clear();
}
inline ::api::v1::Channel* ChannelRetrieveResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ChannelRetrieveResponse.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
ChannelRetrieveResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ChannelRetrieveResponse.channels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channels();
}
inline const ::api::v1::Channel& ChannelRetrieveResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelRetrieveResponse.channels)
    return _internal_channels().Get(index);
}
inline ::api::v1::Channel* ChannelRetrieveResponse::add_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Channel* _add = _internal_mutable_channels()->Add();
  // @@protoc_insertion_point(field_add:api.v1.ChannelRetrieveResponse.channels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
ChannelRetrieveResponse::channels() const {
  // @@protoc_insertion_point(field_list:api.v1.ChannelRetrieveResponse.channels)
  return _internal_channels();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>&
ChannelRetrieveResponse::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Channel>*
ChannelRetrieveResponse::_internal_mutable_channels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channels_;
}

// -------------------------------------------------------------------

// ChannelCreateRequest

// repeated .api.v1.Channel channels = 1 [json_name = "channels"];
inline int ChannelCreateRequest::_internal_channels_size() const {
  return _internal_channels().size();
}
inline int ChannelCreateRequest::channels_size() const {
  return _internal_channels_size();
}
inline void ChannelCreateRequest::clear_channels() {
  _internal_mutable_channels()->Clear();
}
inline ::api::v1::Channel* ChannelCreateRequest::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ChannelCreateRequest.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
ChannelCreateRequest::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ChannelCreateRequest.channels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channels();
}
inline const ::api::v1::Channel& ChannelCreateRequest::channels(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelCreateRequest.channels)
    return _internal_channels().Get(index);
}
inline ::api::v1::Channel* ChannelCreateRequest::add_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Channel* _add = _internal_mutable_channels()->Add();
  // @@protoc_insertion_point(field_add:api.v1.ChannelCreateRequest.channels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
ChannelCreateRequest::channels() const {
  // @@protoc_insertion_point(field_list:api.v1.ChannelCreateRequest.channels)
  return _internal_channels();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>&
ChannelCreateRequest::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Channel>*
ChannelCreateRequest::_internal_mutable_channels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channels_;
}

// -------------------------------------------------------------------

// ChannelCreateResponse

// repeated .api.v1.Channel channels = 1 [json_name = "channels"];
inline int ChannelCreateResponse::_internal_channels_size() const {
  return _internal_channels().size();
}
inline int ChannelCreateResponse::channels_size() const {
  return _internal_channels_size();
}
inline void ChannelCreateResponse::clear_channels() {
  _internal_mutable_channels()->Clear();
}
inline ::api::v1::Channel* ChannelCreateResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.ChannelCreateResponse.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >*
ChannelCreateResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.ChannelCreateResponse.channels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channels();
}
inline const ::api::v1::Channel& ChannelCreateResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.ChannelCreateResponse.channels)
    return _internal_channels().Get(index);
}
inline ::api::v1::Channel* ChannelCreateResponse::add_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Channel* _add = _internal_mutable_channels()->Add();
  // @@protoc_insertion_point(field_add:api.v1.ChannelCreateResponse.channels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Channel >&
ChannelCreateResponse::channels() const {
  // @@protoc_insertion_point(field_list:api.v1.ChannelCreateResponse.channels)
  return _internal_channels();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Channel>&
ChannelCreateResponse::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Channel>*
ChannelCreateResponse::_internal_mutable_channels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channels_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2fchannel_2eproto_2epb_2eh
