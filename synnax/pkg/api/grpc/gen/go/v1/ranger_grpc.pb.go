// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/ranger.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RangeCreateService_Exec_FullMethodName = "/api.v1.RangeCreateService/Exec"
)

// RangeCreateServiceClient is the client API for RangeCreateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeCreateServiceClient interface {
	Exec(ctx context.Context, in *RangeCreateRequest, opts ...grpc.CallOption) (*RangeCreateResponse, error)
}

type rangeCreateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeCreateServiceClient(cc grpc.ClientConnInterface) RangeCreateServiceClient {
	return &rangeCreateServiceClient{cc}
}

func (c *rangeCreateServiceClient) Exec(ctx context.Context, in *RangeCreateRequest, opts ...grpc.CallOption) (*RangeCreateResponse, error) {
	out := new(RangeCreateResponse)
	err := c.cc.Invoke(ctx, RangeCreateService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeCreateServiceServer is the server API for RangeCreateService service.
// All implementations should embed UnimplementedRangeCreateServiceServer
// for forward compatibility
type RangeCreateServiceServer interface {
	Exec(context.Context, *RangeCreateRequest) (*RangeCreateResponse, error)
}

// UnimplementedRangeCreateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRangeCreateServiceServer struct {
}

func (UnimplementedRangeCreateServiceServer) Exec(context.Context, *RangeCreateRequest) (*RangeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeRangeCreateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeCreateServiceServer will
// result in compilation errors.
type UnsafeRangeCreateServiceServer interface {
	mustEmbedUnimplementedRangeCreateServiceServer()
}

func RegisterRangeCreateServiceServer(s grpc.ServiceRegistrar, srv RangeCreateServiceServer) {
	s.RegisterService(&RangeCreateService_ServiceDesc, srv)
}

func _RangeCreateService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeCreateServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RangeCreateService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeCreateServiceServer).Exec(ctx, req.(*RangeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeCreateService_ServiceDesc is the grpc.ServiceDesc for RangeCreateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeCreateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.RangeCreateService",
	HandlerType: (*RangeCreateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _RangeCreateService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ranger.proto",
}

const (
	RangeRetrieveService_Exec_FullMethodName = "/api.v1.RangeRetrieveService/Exec"
)

// RangeRetrieveServiceClient is the client API for RangeRetrieveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeRetrieveServiceClient interface {
	Exec(ctx context.Context, in *RangeRetrieveRequest, opts ...grpc.CallOption) (*RangeRetrieveResponse, error)
}

type rangeRetrieveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeRetrieveServiceClient(cc grpc.ClientConnInterface) RangeRetrieveServiceClient {
	return &rangeRetrieveServiceClient{cc}
}

func (c *rangeRetrieveServiceClient) Exec(ctx context.Context, in *RangeRetrieveRequest, opts ...grpc.CallOption) (*RangeRetrieveResponse, error) {
	out := new(RangeRetrieveResponse)
	err := c.cc.Invoke(ctx, RangeRetrieveService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeRetrieveServiceServer is the server API for RangeRetrieveService service.
// All implementations should embed UnimplementedRangeRetrieveServiceServer
// for forward compatibility
type RangeRetrieveServiceServer interface {
	Exec(context.Context, *RangeRetrieveRequest) (*RangeRetrieveResponse, error)
}

// UnimplementedRangeRetrieveServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRangeRetrieveServiceServer struct {
}

func (UnimplementedRangeRetrieveServiceServer) Exec(context.Context, *RangeRetrieveRequest) (*RangeRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeRangeRetrieveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeRetrieveServiceServer will
// result in compilation errors.
type UnsafeRangeRetrieveServiceServer interface {
	mustEmbedUnimplementedRangeRetrieveServiceServer()
}

func RegisterRangeRetrieveServiceServer(s grpc.ServiceRegistrar, srv RangeRetrieveServiceServer) {
	s.RegisterService(&RangeRetrieveService_ServiceDesc, srv)
}

func _RangeRetrieveService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeRetrieveServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RangeRetrieveService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeRetrieveServiceServer).Exec(ctx, req.(*RangeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeRetrieveService_ServiceDesc is the grpc.ServiceDesc for RangeRetrieveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeRetrieveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.RangeRetrieveService",
	HandlerType: (*RangeRetrieveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _RangeRetrieveService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ranger.proto",
}

const (
	RangeKVSetService_Exec_FullMethodName = "/api.v1.RangeKVSetService/Exec"
)

// RangeKVSetServiceClient is the client API for RangeKVSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeKVSetServiceClient interface {
	Exec(ctx context.Context, in *RangeKVSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rangeKVSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeKVSetServiceClient(cc grpc.ClientConnInterface) RangeKVSetServiceClient {
	return &rangeKVSetServiceClient{cc}
}

func (c *rangeKVSetServiceClient) Exec(ctx context.Context, in *RangeKVSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RangeKVSetService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeKVSetServiceServer is the server API for RangeKVSetService service.
// All implementations should embed UnimplementedRangeKVSetServiceServer
// for forward compatibility
type RangeKVSetServiceServer interface {
	Exec(context.Context, *RangeKVSetRequest) (*emptypb.Empty, error)
}

// UnimplementedRangeKVSetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRangeKVSetServiceServer struct {
}

func (UnimplementedRangeKVSetServiceServer) Exec(context.Context, *RangeKVSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeRangeKVSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeKVSetServiceServer will
// result in compilation errors.
type UnsafeRangeKVSetServiceServer interface {
	mustEmbedUnimplementedRangeKVSetServiceServer()
}

func RegisterRangeKVSetServiceServer(s grpc.ServiceRegistrar, srv RangeKVSetServiceServer) {
	s.RegisterService(&RangeKVSetService_ServiceDesc, srv)
}

func _RangeKVSetService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeKVSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeKVSetServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RangeKVSetService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeKVSetServiceServer).Exec(ctx, req.(*RangeKVSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeKVSetService_ServiceDesc is the grpc.ServiceDesc for RangeKVSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeKVSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.RangeKVSetService",
	HandlerType: (*RangeKVSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _RangeKVSetService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ranger.proto",
}

const (
	RangeKVGetService_Exec_FullMethodName = "/api.v1.RangeKVGetService/Exec"
)

// RangeKVGetServiceClient is the client API for RangeKVGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeKVGetServiceClient interface {
	Exec(ctx context.Context, in *RangeKVGetRequest, opts ...grpc.CallOption) (*RangeKVGetResponse, error)
}

type rangeKVGetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeKVGetServiceClient(cc grpc.ClientConnInterface) RangeKVGetServiceClient {
	return &rangeKVGetServiceClient{cc}
}

func (c *rangeKVGetServiceClient) Exec(ctx context.Context, in *RangeKVGetRequest, opts ...grpc.CallOption) (*RangeKVGetResponse, error) {
	out := new(RangeKVGetResponse)
	err := c.cc.Invoke(ctx, RangeKVGetService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeKVGetServiceServer is the server API for RangeKVGetService service.
// All implementations should embed UnimplementedRangeKVGetServiceServer
// for forward compatibility
type RangeKVGetServiceServer interface {
	Exec(context.Context, *RangeKVGetRequest) (*RangeKVGetResponse, error)
}

// UnimplementedRangeKVGetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRangeKVGetServiceServer struct {
}

func (UnimplementedRangeKVGetServiceServer) Exec(context.Context, *RangeKVGetRequest) (*RangeKVGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeRangeKVGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeKVGetServiceServer will
// result in compilation errors.
type UnsafeRangeKVGetServiceServer interface {
	mustEmbedUnimplementedRangeKVGetServiceServer()
}

func RegisterRangeKVGetServiceServer(s grpc.ServiceRegistrar, srv RangeKVGetServiceServer) {
	s.RegisterService(&RangeKVGetService_ServiceDesc, srv)
}

func _RangeKVGetService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeKVGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeKVGetServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RangeKVGetService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeKVGetServiceServer).Exec(ctx, req.(*RangeKVGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeKVGetService_ServiceDesc is the grpc.ServiceDesc for RangeKVGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeKVGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.RangeKVGetService",
	HandlerType: (*RangeKVGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _RangeKVGetService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ranger.proto",
}

const (
	RangeKVDeleteService_Exec_FullMethodName = "/api.v1.RangeKVDeleteService/Exec"
)

// RangeKVDeleteServiceClient is the client API for RangeKVDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeKVDeleteServiceClient interface {
	Exec(ctx context.Context, in *RangeKVDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rangeKVDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeKVDeleteServiceClient(cc grpc.ClientConnInterface) RangeKVDeleteServiceClient {
	return &rangeKVDeleteServiceClient{cc}
}

func (c *rangeKVDeleteServiceClient) Exec(ctx context.Context, in *RangeKVDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RangeKVDeleteService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeKVDeleteServiceServer is the server API for RangeKVDeleteService service.
// All implementations should embed UnimplementedRangeKVDeleteServiceServer
// for forward compatibility
type RangeKVDeleteServiceServer interface {
	Exec(context.Context, *RangeKVDeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedRangeKVDeleteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRangeKVDeleteServiceServer struct {
}

func (UnimplementedRangeKVDeleteServiceServer) Exec(context.Context, *RangeKVDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeRangeKVDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeKVDeleteServiceServer will
// result in compilation errors.
type UnsafeRangeKVDeleteServiceServer interface {
	mustEmbedUnimplementedRangeKVDeleteServiceServer()
}

func RegisterRangeKVDeleteServiceServer(s grpc.ServiceRegistrar, srv RangeKVDeleteServiceServer) {
	s.RegisterService(&RangeKVDeleteService_ServiceDesc, srv)
}

func _RangeKVDeleteService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeKVDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeKVDeleteServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RangeKVDeleteService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeKVDeleteServiceServer).Exec(ctx, req.(*RangeKVDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeKVDeleteService_ServiceDesc is the grpc.ServiceDesc for RangeKVDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeKVDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.RangeKVDeleteService",
	HandlerType: (*RangeKVDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _RangeKVDeleteService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ranger.proto",
}
