// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/hardware.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HardwareCreateModuleService_Exec_FullMethodName = "/api.v1.HardwareCreateModuleService/Exec"
)

// HardwareCreateModuleServiceClient is the client API for HardwareCreateModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareCreateModuleServiceClient interface {
	Exec(ctx context.Context, in *HardwareCreateModuleRequest, opts ...grpc.CallOption) (*HardwareCreateModuleResponse, error)
}

type hardwareCreateModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareCreateModuleServiceClient(cc grpc.ClientConnInterface) HardwareCreateModuleServiceClient {
	return &hardwareCreateModuleServiceClient{cc}
}

func (c *hardwareCreateModuleServiceClient) Exec(ctx context.Context, in *HardwareCreateModuleRequest, opts ...grpc.CallOption) (*HardwareCreateModuleResponse, error) {
	out := new(HardwareCreateModuleResponse)
	err := c.cc.Invoke(ctx, HardwareCreateModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareCreateModuleServiceServer is the server API for HardwareCreateModuleService service.
// All implementations should embed UnimplementedHardwareCreateModuleServiceServer
// for forward compatibility
type HardwareCreateModuleServiceServer interface {
	Exec(context.Context, *HardwareCreateModuleRequest) (*HardwareCreateModuleResponse, error)
}

// UnimplementedHardwareCreateModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareCreateModuleServiceServer struct {
}

func (UnimplementedHardwareCreateModuleServiceServer) Exec(context.Context, *HardwareCreateModuleRequest) (*HardwareCreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareCreateModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareCreateModuleServiceServer will
// result in compilation errors.
type UnsafeHardwareCreateModuleServiceServer interface {
	mustEmbedUnimplementedHardwareCreateModuleServiceServer()
}

func RegisterHardwareCreateModuleServiceServer(s grpc.ServiceRegistrar, srv HardwareCreateModuleServiceServer) {
	s.RegisterService(&HardwareCreateModuleService_ServiceDesc, srv)
}

func _HardwareCreateModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareCreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareCreateModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareCreateModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareCreateModuleServiceServer).Exec(ctx, req.(*HardwareCreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareCreateModuleService_ServiceDesc is the grpc.ServiceDesc for HardwareCreateModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareCreateModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareCreateModuleService",
	HandlerType: (*HardwareCreateModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareCreateModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareRetrieveModuleService_Exec_FullMethodName = "/api.v1.HardwareRetrieveModuleService/Exec"
)

// HardwareRetrieveModuleServiceClient is the client API for HardwareRetrieveModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareRetrieveModuleServiceClient interface {
	Exec(ctx context.Context, in *HardwareRetrieveModuleRequest, opts ...grpc.CallOption) (*HardwareRetrieveModuleResponse, error)
}

type hardwareRetrieveModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareRetrieveModuleServiceClient(cc grpc.ClientConnInterface) HardwareRetrieveModuleServiceClient {
	return &hardwareRetrieveModuleServiceClient{cc}
}

func (c *hardwareRetrieveModuleServiceClient) Exec(ctx context.Context, in *HardwareRetrieveModuleRequest, opts ...grpc.CallOption) (*HardwareRetrieveModuleResponse, error) {
	out := new(HardwareRetrieveModuleResponse)
	err := c.cc.Invoke(ctx, HardwareRetrieveModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareRetrieveModuleServiceServer is the server API for HardwareRetrieveModuleService service.
// All implementations should embed UnimplementedHardwareRetrieveModuleServiceServer
// for forward compatibility
type HardwareRetrieveModuleServiceServer interface {
	Exec(context.Context, *HardwareRetrieveModuleRequest) (*HardwareRetrieveModuleResponse, error)
}

// UnimplementedHardwareRetrieveModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareRetrieveModuleServiceServer struct {
}

func (UnimplementedHardwareRetrieveModuleServiceServer) Exec(context.Context, *HardwareRetrieveModuleRequest) (*HardwareRetrieveModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareRetrieveModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareRetrieveModuleServiceServer will
// result in compilation errors.
type UnsafeHardwareRetrieveModuleServiceServer interface {
	mustEmbedUnimplementedHardwareRetrieveModuleServiceServer()
}

func RegisterHardwareRetrieveModuleServiceServer(s grpc.ServiceRegistrar, srv HardwareRetrieveModuleServiceServer) {
	s.RegisterService(&HardwareRetrieveModuleService_ServiceDesc, srv)
}

func _HardwareRetrieveModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareRetrieveModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareRetrieveModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareRetrieveModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareRetrieveModuleServiceServer).Exec(ctx, req.(*HardwareRetrieveModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareRetrieveModuleService_ServiceDesc is the grpc.ServiceDesc for HardwareRetrieveModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareRetrieveModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareRetrieveModuleService",
	HandlerType: (*HardwareRetrieveModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareRetrieveModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareDeleteModuleService_Exec_FullMethodName = "/api.v1.HardwareDeleteModuleService/Exec"
)

// HardwareDeleteModuleServiceClient is the client API for HardwareDeleteModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareDeleteModuleServiceClient interface {
	Exec(ctx context.Context, in *HardwareDeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hardwareDeleteModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareDeleteModuleServiceClient(cc grpc.ClientConnInterface) HardwareDeleteModuleServiceClient {
	return &hardwareDeleteModuleServiceClient{cc}
}

func (c *hardwareDeleteModuleServiceClient) Exec(ctx context.Context, in *HardwareDeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HardwareDeleteModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareDeleteModuleServiceServer is the server API for HardwareDeleteModuleService service.
// All implementations should embed UnimplementedHardwareDeleteModuleServiceServer
// for forward compatibility
type HardwareDeleteModuleServiceServer interface {
	Exec(context.Context, *HardwareDeleteModuleRequest) (*emptypb.Empty, error)
}

// UnimplementedHardwareDeleteModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareDeleteModuleServiceServer struct {
}

func (UnimplementedHardwareDeleteModuleServiceServer) Exec(context.Context, *HardwareDeleteModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareDeleteModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareDeleteModuleServiceServer will
// result in compilation errors.
type UnsafeHardwareDeleteModuleServiceServer interface {
	mustEmbedUnimplementedHardwareDeleteModuleServiceServer()
}

func RegisterHardwareDeleteModuleServiceServer(s grpc.ServiceRegistrar, srv HardwareDeleteModuleServiceServer) {
	s.RegisterService(&HardwareDeleteModuleService_ServiceDesc, srv)
}

func _HardwareDeleteModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareDeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareDeleteModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareDeleteModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareDeleteModuleServiceServer).Exec(ctx, req.(*HardwareDeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareDeleteModuleService_ServiceDesc is the grpc.ServiceDesc for HardwareDeleteModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareDeleteModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareDeleteModuleService",
	HandlerType: (*HardwareDeleteModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareDeleteModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareCreateRackService_Exec_FullMethodName = "/api.v1.HardwareCreateRackService/Exec"
)

// HardwareCreateRackServiceClient is the client API for HardwareCreateRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareCreateRackServiceClient interface {
	Exec(ctx context.Context, in *HardwareCreateRackRequest, opts ...grpc.CallOption) (*HardwareCreateRackResponse, error)
}

type hardwareCreateRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareCreateRackServiceClient(cc grpc.ClientConnInterface) HardwareCreateRackServiceClient {
	return &hardwareCreateRackServiceClient{cc}
}

func (c *hardwareCreateRackServiceClient) Exec(ctx context.Context, in *HardwareCreateRackRequest, opts ...grpc.CallOption) (*HardwareCreateRackResponse, error) {
	out := new(HardwareCreateRackResponse)
	err := c.cc.Invoke(ctx, HardwareCreateRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareCreateRackServiceServer is the server API for HardwareCreateRackService service.
// All implementations should embed UnimplementedHardwareCreateRackServiceServer
// for forward compatibility
type HardwareCreateRackServiceServer interface {
	Exec(context.Context, *HardwareCreateRackRequest) (*HardwareCreateRackResponse, error)
}

// UnimplementedHardwareCreateRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareCreateRackServiceServer struct {
}

func (UnimplementedHardwareCreateRackServiceServer) Exec(context.Context, *HardwareCreateRackRequest) (*HardwareCreateRackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareCreateRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareCreateRackServiceServer will
// result in compilation errors.
type UnsafeHardwareCreateRackServiceServer interface {
	mustEmbedUnimplementedHardwareCreateRackServiceServer()
}

func RegisterHardwareCreateRackServiceServer(s grpc.ServiceRegistrar, srv HardwareCreateRackServiceServer) {
	s.RegisterService(&HardwareCreateRackService_ServiceDesc, srv)
}

func _HardwareCreateRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareCreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareCreateRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareCreateRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareCreateRackServiceServer).Exec(ctx, req.(*HardwareCreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareCreateRackService_ServiceDesc is the grpc.ServiceDesc for HardwareCreateRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareCreateRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareCreateRackService",
	HandlerType: (*HardwareCreateRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareCreateRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareRetrieveRackService_Exec_FullMethodName = "/api.v1.HardwareRetrieveRackService/Exec"
)

// HardwareRetrieveRackServiceClient is the client API for HardwareRetrieveRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareRetrieveRackServiceClient interface {
	Exec(ctx context.Context, in *HardwareRetrieveRackRequest, opts ...grpc.CallOption) (*HardwareRetrieveRackResponse, error)
}

type hardwareRetrieveRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareRetrieveRackServiceClient(cc grpc.ClientConnInterface) HardwareRetrieveRackServiceClient {
	return &hardwareRetrieveRackServiceClient{cc}
}

func (c *hardwareRetrieveRackServiceClient) Exec(ctx context.Context, in *HardwareRetrieveRackRequest, opts ...grpc.CallOption) (*HardwareRetrieveRackResponse, error) {
	out := new(HardwareRetrieveRackResponse)
	err := c.cc.Invoke(ctx, HardwareRetrieveRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareRetrieveRackServiceServer is the server API for HardwareRetrieveRackService service.
// All implementations should embed UnimplementedHardwareRetrieveRackServiceServer
// for forward compatibility
type HardwareRetrieveRackServiceServer interface {
	Exec(context.Context, *HardwareRetrieveRackRequest) (*HardwareRetrieveRackResponse, error)
}

// UnimplementedHardwareRetrieveRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareRetrieveRackServiceServer struct {
}

func (UnimplementedHardwareRetrieveRackServiceServer) Exec(context.Context, *HardwareRetrieveRackRequest) (*HardwareRetrieveRackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareRetrieveRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareRetrieveRackServiceServer will
// result in compilation errors.
type UnsafeHardwareRetrieveRackServiceServer interface {
	mustEmbedUnimplementedHardwareRetrieveRackServiceServer()
}

func RegisterHardwareRetrieveRackServiceServer(s grpc.ServiceRegistrar, srv HardwareRetrieveRackServiceServer) {
	s.RegisterService(&HardwareRetrieveRackService_ServiceDesc, srv)
}

func _HardwareRetrieveRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareRetrieveRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareRetrieveRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareRetrieveRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareRetrieveRackServiceServer).Exec(ctx, req.(*HardwareRetrieveRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareRetrieveRackService_ServiceDesc is the grpc.ServiceDesc for HardwareRetrieveRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareRetrieveRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareRetrieveRackService",
	HandlerType: (*HardwareRetrieveRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareRetrieveRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareDeleteRackService_Exec_FullMethodName = "/api.v1.HardwareDeleteRackService/Exec"
)

// HardwareDeleteRackServiceClient is the client API for HardwareDeleteRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareDeleteRackServiceClient interface {
	Exec(ctx context.Context, in *HardwareDeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hardwareDeleteRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareDeleteRackServiceClient(cc grpc.ClientConnInterface) HardwareDeleteRackServiceClient {
	return &hardwareDeleteRackServiceClient{cc}
}

func (c *hardwareDeleteRackServiceClient) Exec(ctx context.Context, in *HardwareDeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HardwareDeleteRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareDeleteRackServiceServer is the server API for HardwareDeleteRackService service.
// All implementations should embed UnimplementedHardwareDeleteRackServiceServer
// for forward compatibility
type HardwareDeleteRackServiceServer interface {
	Exec(context.Context, *HardwareDeleteRackRequest) (*emptypb.Empty, error)
}

// UnimplementedHardwareDeleteRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareDeleteRackServiceServer struct {
}

func (UnimplementedHardwareDeleteRackServiceServer) Exec(context.Context, *HardwareDeleteRackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareDeleteRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareDeleteRackServiceServer will
// result in compilation errors.
type UnsafeHardwareDeleteRackServiceServer interface {
	mustEmbedUnimplementedHardwareDeleteRackServiceServer()
}

func RegisterHardwareDeleteRackServiceServer(s grpc.ServiceRegistrar, srv HardwareDeleteRackServiceServer) {
	s.RegisterService(&HardwareDeleteRackService_ServiceDesc, srv)
}

func _HardwareDeleteRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareDeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareDeleteRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareDeleteRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareDeleteRackServiceServer).Exec(ctx, req.(*HardwareDeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareDeleteRackService_ServiceDesc is the grpc.ServiceDesc for HardwareDeleteRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareDeleteRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareDeleteRackService",
	HandlerType: (*HardwareDeleteRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareDeleteRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareCreateDeviceService_Exec_FullMethodName = "/api.v1.HardwareCreateDeviceService/Exec"
)

// HardwareCreateDeviceServiceClient is the client API for HardwareCreateDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareCreateDeviceServiceClient interface {
	Exec(ctx context.Context, in *HardwareCreateDeviceRequest, opts ...grpc.CallOption) (*HardwareCreateDeviceResponse, error)
}

type hardwareCreateDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareCreateDeviceServiceClient(cc grpc.ClientConnInterface) HardwareCreateDeviceServiceClient {
	return &hardwareCreateDeviceServiceClient{cc}
}

func (c *hardwareCreateDeviceServiceClient) Exec(ctx context.Context, in *HardwareCreateDeviceRequest, opts ...grpc.CallOption) (*HardwareCreateDeviceResponse, error) {
	out := new(HardwareCreateDeviceResponse)
	err := c.cc.Invoke(ctx, HardwareCreateDeviceService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareCreateDeviceServiceServer is the server API for HardwareCreateDeviceService service.
// All implementations should embed UnimplementedHardwareCreateDeviceServiceServer
// for forward compatibility
type HardwareCreateDeviceServiceServer interface {
	Exec(context.Context, *HardwareCreateDeviceRequest) (*HardwareCreateDeviceResponse, error)
}

// UnimplementedHardwareCreateDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareCreateDeviceServiceServer struct {
}

func (UnimplementedHardwareCreateDeviceServiceServer) Exec(context.Context, *HardwareCreateDeviceRequest) (*HardwareCreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareCreateDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareCreateDeviceServiceServer will
// result in compilation errors.
type UnsafeHardwareCreateDeviceServiceServer interface {
	mustEmbedUnimplementedHardwareCreateDeviceServiceServer()
}

func RegisterHardwareCreateDeviceServiceServer(s grpc.ServiceRegistrar, srv HardwareCreateDeviceServiceServer) {
	s.RegisterService(&HardwareCreateDeviceService_ServiceDesc, srv)
}

func _HardwareCreateDeviceService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareCreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareCreateDeviceServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareCreateDeviceService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareCreateDeviceServiceServer).Exec(ctx, req.(*HardwareCreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareCreateDeviceService_ServiceDesc is the grpc.ServiceDesc for HardwareCreateDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareCreateDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareCreateDeviceService",
	HandlerType: (*HardwareCreateDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareCreateDeviceService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareRetrieveDeviceService_Exec_FullMethodName = "/api.v1.HardwareRetrieveDeviceService/Exec"
)

// HardwareRetrieveDeviceServiceClient is the client API for HardwareRetrieveDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareRetrieveDeviceServiceClient interface {
	Exec(ctx context.Context, in *HardwareRetrieveDeviceRequest, opts ...grpc.CallOption) (*HardwareRetrieveDeviceResponse, error)
}

type hardwareRetrieveDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareRetrieveDeviceServiceClient(cc grpc.ClientConnInterface) HardwareRetrieveDeviceServiceClient {
	return &hardwareRetrieveDeviceServiceClient{cc}
}

func (c *hardwareRetrieveDeviceServiceClient) Exec(ctx context.Context, in *HardwareRetrieveDeviceRequest, opts ...grpc.CallOption) (*HardwareRetrieveDeviceResponse, error) {
	out := new(HardwareRetrieveDeviceResponse)
	err := c.cc.Invoke(ctx, HardwareRetrieveDeviceService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareRetrieveDeviceServiceServer is the server API for HardwareRetrieveDeviceService service.
// All implementations should embed UnimplementedHardwareRetrieveDeviceServiceServer
// for forward compatibility
type HardwareRetrieveDeviceServiceServer interface {
	Exec(context.Context, *HardwareRetrieveDeviceRequest) (*HardwareRetrieveDeviceResponse, error)
}

// UnimplementedHardwareRetrieveDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareRetrieveDeviceServiceServer struct {
}

func (UnimplementedHardwareRetrieveDeviceServiceServer) Exec(context.Context, *HardwareRetrieveDeviceRequest) (*HardwareRetrieveDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareRetrieveDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareRetrieveDeviceServiceServer will
// result in compilation errors.
type UnsafeHardwareRetrieveDeviceServiceServer interface {
	mustEmbedUnimplementedHardwareRetrieveDeviceServiceServer()
}

func RegisterHardwareRetrieveDeviceServiceServer(s grpc.ServiceRegistrar, srv HardwareRetrieveDeviceServiceServer) {
	s.RegisterService(&HardwareRetrieveDeviceService_ServiceDesc, srv)
}

func _HardwareRetrieveDeviceService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareRetrieveDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareRetrieveDeviceServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareRetrieveDeviceService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareRetrieveDeviceServiceServer).Exec(ctx, req.(*HardwareRetrieveDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareRetrieveDeviceService_ServiceDesc is the grpc.ServiceDesc for HardwareRetrieveDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareRetrieveDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareRetrieveDeviceService",
	HandlerType: (*HardwareRetrieveDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareRetrieveDeviceService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}

const (
	HardwareDeleteDeviceService_Exec_FullMethodName = "/api.v1.HardwareDeleteDeviceService/Exec"
)

// HardwareDeleteDeviceServiceClient is the client API for HardwareDeleteDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareDeleteDeviceServiceClient interface {
	Exec(ctx context.Context, in *HardwareDeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hardwareDeleteDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareDeleteDeviceServiceClient(cc grpc.ClientConnInterface) HardwareDeleteDeviceServiceClient {
	return &hardwareDeleteDeviceServiceClient{cc}
}

func (c *hardwareDeleteDeviceServiceClient) Exec(ctx context.Context, in *HardwareDeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HardwareDeleteDeviceService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareDeleteDeviceServiceServer is the server API for HardwareDeleteDeviceService service.
// All implementations should embed UnimplementedHardwareDeleteDeviceServiceServer
// for forward compatibility
type HardwareDeleteDeviceServiceServer interface {
	Exec(context.Context, *HardwareDeleteDeviceRequest) (*emptypb.Empty, error)
}

// UnimplementedHardwareDeleteDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHardwareDeleteDeviceServiceServer struct {
}

func (UnimplementedHardwareDeleteDeviceServiceServer) Exec(context.Context, *HardwareDeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeHardwareDeleteDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareDeleteDeviceServiceServer will
// result in compilation errors.
type UnsafeHardwareDeleteDeviceServiceServer interface {
	mustEmbedUnimplementedHardwareDeleteDeviceServiceServer()
}

func RegisterHardwareDeleteDeviceServiceServer(s grpc.ServiceRegistrar, srv HardwareDeleteDeviceServiceServer) {
	s.RegisterService(&HardwareDeleteDeviceService_ServiceDesc, srv)
}

func _HardwareDeleteDeviceService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareDeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareDeleteDeviceServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareDeleteDeviceService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareDeleteDeviceServiceServer).Exec(ctx, req.(*HardwareDeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareDeleteDeviceService_ServiceDesc is the grpc.ServiceDesc for HardwareDeleteDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareDeleteDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HardwareDeleteDeviceService",
	HandlerType: (*HardwareDeleteDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _HardwareDeleteDeviceService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/hardware.proto",
}
