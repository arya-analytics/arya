// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/framer.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FrameService_Iterate_FullMethodName = "/api.v1.FrameService/Iterate"
	FrameService_Write_FullMethodName   = "/api.v1.FrameService/Write"
	FrameService_Stream_FullMethodName  = "/api.v1.FrameService/Stream"
)

// FrameServiceClient is the client API for FrameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrameServiceClient interface {
	Iterate(ctx context.Context, opts ...grpc.CallOption) (FrameService_IterateClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (FrameService_WriteClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (FrameService_StreamClient, error)
}

type frameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameServiceClient(cc grpc.ClientConnInterface) FrameServiceClient {
	return &frameServiceClient{cc}
}

func (c *frameServiceClient) Iterate(ctx context.Context, opts ...grpc.CallOption) (FrameService_IterateClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrameService_ServiceDesc.Streams[0], FrameService_Iterate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &frameServiceIterateClient{stream}
	return x, nil
}

type FrameService_IterateClient interface {
	Send(*FrameIteratorRequest) error
	Recv() (*FrameIteratorResponse, error)
	grpc.ClientStream
}

type frameServiceIterateClient struct {
	grpc.ClientStream
}

func (x *frameServiceIterateClient) Send(m *FrameIteratorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frameServiceIterateClient) Recv() (*FrameIteratorResponse, error) {
	m := new(FrameIteratorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frameServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (FrameService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrameService_ServiceDesc.Streams[1], FrameService_Write_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &frameServiceWriteClient{stream}
	return x, nil
}

type FrameService_WriteClient interface {
	Send(*FrameWriterRequest) error
	Recv() (*FrameWriterResponse, error)
	grpc.ClientStream
}

type frameServiceWriteClient struct {
	grpc.ClientStream
}

func (x *frameServiceWriteClient) Send(m *FrameWriterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frameServiceWriteClient) Recv() (*FrameWriterResponse, error) {
	m := new(FrameWriterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frameServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (FrameService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrameService_ServiceDesc.Streams[2], FrameService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &frameServiceStreamClient{stream}
	return x, nil
}

type FrameService_StreamClient interface {
	Send(*FrameStreamerRequest) error
	Recv() (*FrameStreamerResponse, error)
	grpc.ClientStream
}

type frameServiceStreamClient struct {
	grpc.ClientStream
}

func (x *frameServiceStreamClient) Send(m *FrameStreamerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frameServiceStreamClient) Recv() (*FrameStreamerResponse, error) {
	m := new(FrameStreamerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrameServiceServer is the server API for FrameService service.
// All implementations should embed UnimplementedFrameServiceServer
// for forward compatibility
type FrameServiceServer interface {
	Iterate(FrameService_IterateServer) error
	Write(FrameService_WriteServer) error
	Stream(FrameService_StreamServer) error
}

// UnimplementedFrameServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFrameServiceServer struct {
}

func (UnimplementedFrameServiceServer) Iterate(FrameService_IterateServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}
func (UnimplementedFrameServiceServer) Write(FrameService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFrameServiceServer) Stream(FrameService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// UnsafeFrameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrameServiceServer will
// result in compilation errors.
type UnsafeFrameServiceServer interface {
	mustEmbedUnimplementedFrameServiceServer()
}

func RegisterFrameServiceServer(s grpc.ServiceRegistrar, srv FrameServiceServer) {
	s.RegisterService(&FrameService_ServiceDesc, srv)
}

func _FrameService_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameServiceServer).Iterate(&frameServiceIterateServer{stream})
}

type FrameService_IterateServer interface {
	Send(*FrameIteratorResponse) error
	Recv() (*FrameIteratorRequest, error)
	grpc.ServerStream
}

type frameServiceIterateServer struct {
	grpc.ServerStream
}

func (x *frameServiceIterateServer) Send(m *FrameIteratorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frameServiceIterateServer) Recv() (*FrameIteratorRequest, error) {
	m := new(FrameIteratorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FrameService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameServiceServer).Write(&frameServiceWriteServer{stream})
}

type FrameService_WriteServer interface {
	Send(*FrameWriterResponse) error
	Recv() (*FrameWriterRequest, error)
	grpc.ServerStream
}

type frameServiceWriteServer struct {
	grpc.ServerStream
}

func (x *frameServiceWriteServer) Send(m *FrameWriterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frameServiceWriteServer) Recv() (*FrameWriterRequest, error) {
	m := new(FrameWriterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FrameService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameServiceServer).Stream(&frameServiceStreamServer{stream})
}

type FrameService_StreamServer interface {
	Send(*FrameStreamerResponse) error
	Recv() (*FrameStreamerRequest, error)
	grpc.ServerStream
}

type frameServiceStreamServer struct {
	grpc.ServerStream
}

func (x *frameServiceStreamServer) Send(m *FrameStreamerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frameServiceStreamServer) Recv() (*FrameStreamerRequest, error) {
	m := new(FrameStreamerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrameService_ServiceDesc is the grpc.ServiceDesc for FrameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.FrameService",
	HandlerType: (*FrameServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iterate",
			Handler:       _FrameService_Iterate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _FrameService_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _FrameService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/framer.proto",
}
