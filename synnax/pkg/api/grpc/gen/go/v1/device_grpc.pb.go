// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/device.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceCreateModuleService_Exec_FullMethodName = "/api.v1.DeviceCreateModuleService/Exec"
)

// DeviceCreateModuleServiceClient is the client API for DeviceCreateModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceCreateModuleServiceClient interface {
	Exec(ctx context.Context, in *DeviceCreateModuleRequest, opts ...grpc.CallOption) (*DeviceCreateModuleResponse, error)
}

type deviceCreateModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceCreateModuleServiceClient(cc grpc.ClientConnInterface) DeviceCreateModuleServiceClient {
	return &deviceCreateModuleServiceClient{cc}
}

func (c *deviceCreateModuleServiceClient) Exec(ctx context.Context, in *DeviceCreateModuleRequest, opts ...grpc.CallOption) (*DeviceCreateModuleResponse, error) {
	out := new(DeviceCreateModuleResponse)
	err := c.cc.Invoke(ctx, DeviceCreateModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCreateModuleServiceServer is the server API for DeviceCreateModuleService service.
// All implementations should embed UnimplementedDeviceCreateModuleServiceServer
// for forward compatibility
type DeviceCreateModuleServiceServer interface {
	Exec(context.Context, *DeviceCreateModuleRequest) (*DeviceCreateModuleResponse, error)
}

// UnimplementedDeviceCreateModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceCreateModuleServiceServer struct {
}

func (UnimplementedDeviceCreateModuleServiceServer) Exec(context.Context, *DeviceCreateModuleRequest) (*DeviceCreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceCreateModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceCreateModuleServiceServer will
// result in compilation errors.
type UnsafeDeviceCreateModuleServiceServer interface {
	mustEmbedUnimplementedDeviceCreateModuleServiceServer()
}

func RegisterDeviceCreateModuleServiceServer(s grpc.ServiceRegistrar, srv DeviceCreateModuleServiceServer) {
	s.RegisterService(&DeviceCreateModuleService_ServiceDesc, srv)
}

func _DeviceCreateModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCreateModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceCreateModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCreateModuleServiceServer).Exec(ctx, req.(*DeviceCreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceCreateModuleService_ServiceDesc is the grpc.ServiceDesc for DeviceCreateModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceCreateModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceCreateModuleService",
	HandlerType: (*DeviceCreateModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceCreateModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}

const (
	DeviceRetrieveModuleService_Exec_FullMethodName = "/api.v1.DeviceRetrieveModuleService/Exec"
)

// DeviceRetrieveModuleServiceClient is the client API for DeviceRetrieveModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceRetrieveModuleServiceClient interface {
	Exec(ctx context.Context, in *DeviceRetrieveModuleRequest, opts ...grpc.CallOption) (*DeviceRetrieveModuleResponse, error)
}

type deviceRetrieveModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRetrieveModuleServiceClient(cc grpc.ClientConnInterface) DeviceRetrieveModuleServiceClient {
	return &deviceRetrieveModuleServiceClient{cc}
}

func (c *deviceRetrieveModuleServiceClient) Exec(ctx context.Context, in *DeviceRetrieveModuleRequest, opts ...grpc.CallOption) (*DeviceRetrieveModuleResponse, error) {
	out := new(DeviceRetrieveModuleResponse)
	err := c.cc.Invoke(ctx, DeviceRetrieveModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRetrieveModuleServiceServer is the server API for DeviceRetrieveModuleService service.
// All implementations should embed UnimplementedDeviceRetrieveModuleServiceServer
// for forward compatibility
type DeviceRetrieveModuleServiceServer interface {
	Exec(context.Context, *DeviceRetrieveModuleRequest) (*DeviceRetrieveModuleResponse, error)
}

// UnimplementedDeviceRetrieveModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceRetrieveModuleServiceServer struct {
}

func (UnimplementedDeviceRetrieveModuleServiceServer) Exec(context.Context, *DeviceRetrieveModuleRequest) (*DeviceRetrieveModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceRetrieveModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRetrieveModuleServiceServer will
// result in compilation errors.
type UnsafeDeviceRetrieveModuleServiceServer interface {
	mustEmbedUnimplementedDeviceRetrieveModuleServiceServer()
}

func RegisterDeviceRetrieveModuleServiceServer(s grpc.ServiceRegistrar, srv DeviceRetrieveModuleServiceServer) {
	s.RegisterService(&DeviceRetrieveModuleService_ServiceDesc, srv)
}

func _DeviceRetrieveModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRetrieveModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRetrieveModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRetrieveModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRetrieveModuleServiceServer).Exec(ctx, req.(*DeviceRetrieveModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRetrieveModuleService_ServiceDesc is the grpc.ServiceDesc for DeviceRetrieveModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRetrieveModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceRetrieveModuleService",
	HandlerType: (*DeviceRetrieveModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceRetrieveModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}

const (
	DeviceDeleteModuleService_Exec_FullMethodName = "/api.v1.DeviceDeleteModuleService/Exec"
)

// DeviceDeleteModuleServiceClient is the client API for DeviceDeleteModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDeleteModuleServiceClient interface {
	Exec(ctx context.Context, in *DeviceDeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceDeleteModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDeleteModuleServiceClient(cc grpc.ClientConnInterface) DeviceDeleteModuleServiceClient {
	return &deviceDeleteModuleServiceClient{cc}
}

func (c *deviceDeleteModuleServiceClient) Exec(ctx context.Context, in *DeviceDeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceDeleteModuleService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceDeleteModuleServiceServer is the server API for DeviceDeleteModuleService service.
// All implementations should embed UnimplementedDeviceDeleteModuleServiceServer
// for forward compatibility
type DeviceDeleteModuleServiceServer interface {
	Exec(context.Context, *DeviceDeleteModuleRequest) (*emptypb.Empty, error)
}

// UnimplementedDeviceDeleteModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceDeleteModuleServiceServer struct {
}

func (UnimplementedDeviceDeleteModuleServiceServer) Exec(context.Context, *DeviceDeleteModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceDeleteModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDeleteModuleServiceServer will
// result in compilation errors.
type UnsafeDeviceDeleteModuleServiceServer interface {
	mustEmbedUnimplementedDeviceDeleteModuleServiceServer()
}

func RegisterDeviceDeleteModuleServiceServer(s grpc.ServiceRegistrar, srv DeviceDeleteModuleServiceServer) {
	s.RegisterService(&DeviceDeleteModuleService_ServiceDesc, srv)
}

func _DeviceDeleteModuleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDeleteModuleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDeleteModuleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDeleteModuleServiceServer).Exec(ctx, req.(*DeviceDeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceDeleteModuleService_ServiceDesc is the grpc.ServiceDesc for DeviceDeleteModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDeleteModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceDeleteModuleService",
	HandlerType: (*DeviceDeleteModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceDeleteModuleService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}

const (
	DeviceCreateRackService_Exec_FullMethodName = "/api.v1.DeviceCreateRackService/Exec"
)

// DeviceCreateRackServiceClient is the client API for DeviceCreateRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceCreateRackServiceClient interface {
	Exec(ctx context.Context, in *DeviceCreateRackRequest, opts ...grpc.CallOption) (*DeviceCreateRackResponse, error)
}

type deviceCreateRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceCreateRackServiceClient(cc grpc.ClientConnInterface) DeviceCreateRackServiceClient {
	return &deviceCreateRackServiceClient{cc}
}

func (c *deviceCreateRackServiceClient) Exec(ctx context.Context, in *DeviceCreateRackRequest, opts ...grpc.CallOption) (*DeviceCreateRackResponse, error) {
	out := new(DeviceCreateRackResponse)
	err := c.cc.Invoke(ctx, DeviceCreateRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCreateRackServiceServer is the server API for DeviceCreateRackService service.
// All implementations should embed UnimplementedDeviceCreateRackServiceServer
// for forward compatibility
type DeviceCreateRackServiceServer interface {
	Exec(context.Context, *DeviceCreateRackRequest) (*DeviceCreateRackResponse, error)
}

// UnimplementedDeviceCreateRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceCreateRackServiceServer struct {
}

func (UnimplementedDeviceCreateRackServiceServer) Exec(context.Context, *DeviceCreateRackRequest) (*DeviceCreateRackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceCreateRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceCreateRackServiceServer will
// result in compilation errors.
type UnsafeDeviceCreateRackServiceServer interface {
	mustEmbedUnimplementedDeviceCreateRackServiceServer()
}

func RegisterDeviceCreateRackServiceServer(s grpc.ServiceRegistrar, srv DeviceCreateRackServiceServer) {
	s.RegisterService(&DeviceCreateRackService_ServiceDesc, srv)
}

func _DeviceCreateRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCreateRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceCreateRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCreateRackServiceServer).Exec(ctx, req.(*DeviceCreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceCreateRackService_ServiceDesc is the grpc.ServiceDesc for DeviceCreateRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceCreateRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceCreateRackService",
	HandlerType: (*DeviceCreateRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceCreateRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}

const (
	DeviceRetrieveRackService_Exec_FullMethodName = "/api.v1.DeviceRetrieveRackService/Exec"
)

// DeviceRetrieveRackServiceClient is the client API for DeviceRetrieveRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceRetrieveRackServiceClient interface {
	Exec(ctx context.Context, in *DeviceRetrieveRackRequest, opts ...grpc.CallOption) (*DeviceRetrieveRackResponse, error)
}

type deviceRetrieveRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRetrieveRackServiceClient(cc grpc.ClientConnInterface) DeviceRetrieveRackServiceClient {
	return &deviceRetrieveRackServiceClient{cc}
}

func (c *deviceRetrieveRackServiceClient) Exec(ctx context.Context, in *DeviceRetrieveRackRequest, opts ...grpc.CallOption) (*DeviceRetrieveRackResponse, error) {
	out := new(DeviceRetrieveRackResponse)
	err := c.cc.Invoke(ctx, DeviceRetrieveRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRetrieveRackServiceServer is the server API for DeviceRetrieveRackService service.
// All implementations should embed UnimplementedDeviceRetrieveRackServiceServer
// for forward compatibility
type DeviceRetrieveRackServiceServer interface {
	Exec(context.Context, *DeviceRetrieveRackRequest) (*DeviceRetrieveRackResponse, error)
}

// UnimplementedDeviceRetrieveRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceRetrieveRackServiceServer struct {
}

func (UnimplementedDeviceRetrieveRackServiceServer) Exec(context.Context, *DeviceRetrieveRackRequest) (*DeviceRetrieveRackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceRetrieveRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRetrieveRackServiceServer will
// result in compilation errors.
type UnsafeDeviceRetrieveRackServiceServer interface {
	mustEmbedUnimplementedDeviceRetrieveRackServiceServer()
}

func RegisterDeviceRetrieveRackServiceServer(s grpc.ServiceRegistrar, srv DeviceRetrieveRackServiceServer) {
	s.RegisterService(&DeviceRetrieveRackService_ServiceDesc, srv)
}

func _DeviceRetrieveRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRetrieveRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRetrieveRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRetrieveRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRetrieveRackServiceServer).Exec(ctx, req.(*DeviceRetrieveRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRetrieveRackService_ServiceDesc is the grpc.ServiceDesc for DeviceRetrieveRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRetrieveRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceRetrieveRackService",
	HandlerType: (*DeviceRetrieveRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceRetrieveRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}

const (
	DeviceDeleteRackService_Exec_FullMethodName = "/api.v1.DeviceDeleteRackService/Exec"
)

// DeviceDeleteRackServiceClient is the client API for DeviceDeleteRackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDeleteRackServiceClient interface {
	Exec(ctx context.Context, in *DeviceDeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceDeleteRackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDeleteRackServiceClient(cc grpc.ClientConnInterface) DeviceDeleteRackServiceClient {
	return &deviceDeleteRackServiceClient{cc}
}

func (c *deviceDeleteRackServiceClient) Exec(ctx context.Context, in *DeviceDeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceDeleteRackService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceDeleteRackServiceServer is the server API for DeviceDeleteRackService service.
// All implementations should embed UnimplementedDeviceDeleteRackServiceServer
// for forward compatibility
type DeviceDeleteRackServiceServer interface {
	Exec(context.Context, *DeviceDeleteRackRequest) (*emptypb.Empty, error)
}

// UnimplementedDeviceDeleteRackServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceDeleteRackServiceServer struct {
}

func (UnimplementedDeviceDeleteRackServiceServer) Exec(context.Context, *DeviceDeleteRackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

// UnsafeDeviceDeleteRackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDeleteRackServiceServer will
// result in compilation errors.
type UnsafeDeviceDeleteRackServiceServer interface {
	mustEmbedUnimplementedDeviceDeleteRackServiceServer()
}

func RegisterDeviceDeleteRackServiceServer(s grpc.ServiceRegistrar, srv DeviceDeleteRackServiceServer) {
	s.RegisterService(&DeviceDeleteRackService_ServiceDesc, srv)
}

func _DeviceDeleteRackService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDeleteRackServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDeleteRackService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDeleteRackServiceServer).Exec(ctx, req.(*DeviceDeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceDeleteRackService_ServiceDesc is the grpc.ServiceDesc for DeviceDeleteRackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDeleteRackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeviceDeleteRackService",
	HandlerType: (*DeviceDeleteRackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _DeviceDeleteRackService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/device.proto",
}
