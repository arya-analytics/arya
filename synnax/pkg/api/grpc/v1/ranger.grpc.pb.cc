// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/ranger.proto

#include "v1/ranger.pb.h"
#include "v1/ranger.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace api {
namespace v1 {

static const char* RangeCreateService_method_names[] = {
  "/api.v1.RangeCreateService/Exec",
};

std::unique_ptr< RangeCreateService::Stub> RangeCreateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RangeCreateService::Stub> stub(new RangeCreateService::Stub(channel, options));
  return stub;
}

RangeCreateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exec_(RangeCreateService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RangeCreateService::Stub::Exec(::grpc::ClientContext* context, const ::api::v1::RangeCreateRequest& request, ::api::v1::RangeCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::RangeCreateRequest, ::api::v1::RangeCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RangeCreateService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeCreateRequest* request, ::api::v1::RangeCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::RangeCreateRequest, ::api::v1::RangeCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RangeCreateService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeCreateRequest* request, ::api::v1::RangeCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeCreateResponse>* RangeCreateService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::RangeCreateResponse, ::api::v1::RangeCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeCreateResponse>* RangeCreateService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

RangeCreateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RangeCreateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RangeCreateService::Service, ::api::v1::RangeCreateRequest, ::api::v1::RangeCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RangeCreateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::RangeCreateRequest* req,
             ::api::v1::RangeCreateResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
}

RangeCreateService::Service::~Service() {
}

::grpc::Status RangeCreateService::Service::Exec(::grpc::ServerContext* context, const ::api::v1::RangeCreateRequest* request, ::api::v1::RangeCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RangeRetrieveService_method_names[] = {
  "/api.v1.RangeRetrieveService/Exec",
};

std::unique_ptr< RangeRetrieveService::Stub> RangeRetrieveService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RangeRetrieveService::Stub> stub(new RangeRetrieveService::Stub(channel, options));
  return stub;
}

RangeRetrieveService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exec_(RangeRetrieveService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RangeRetrieveService::Stub::Exec(::grpc::ClientContext* context, const ::api::v1::RangeRetrieveRequest& request, ::api::v1::RangeRetrieveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::RangeRetrieveRequest, ::api::v1::RangeRetrieveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RangeRetrieveService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeRetrieveRequest* request, ::api::v1::RangeRetrieveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::RangeRetrieveRequest, ::api::v1::RangeRetrieveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RangeRetrieveService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeRetrieveRequest* request, ::api::v1::RangeRetrieveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeRetrieveResponse>* RangeRetrieveService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeRetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::RangeRetrieveResponse, ::api::v1::RangeRetrieveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeRetrieveResponse>* RangeRetrieveService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeRetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

RangeRetrieveService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RangeRetrieveService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RangeRetrieveService::Service, ::api::v1::RangeRetrieveRequest, ::api::v1::RangeRetrieveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RangeRetrieveService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::RangeRetrieveRequest* req,
             ::api::v1::RangeRetrieveResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
}

RangeRetrieveService::Service::~Service() {
}

::grpc::Status RangeRetrieveService::Service::Exec(::grpc::ServerContext* context, const ::api::v1::RangeRetrieveRequest* request, ::api::v1::RangeRetrieveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RangeKVSetService_method_names[] = {
  "/api.v1.RangeKVSetService/Exec",
};

std::unique_ptr< RangeKVSetService::Stub> RangeKVSetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RangeKVSetService::Stub> stub(new RangeKVSetService::Stub(channel, options));
  return stub;
}

RangeKVSetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exec_(RangeKVSetService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RangeKVSetService::Stub::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::RangeKVSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RangeKVSetService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::RangeKVSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RangeKVSetService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RangeKVSetService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::api::v1::RangeKVSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RangeKVSetService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

RangeKVSetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RangeKVSetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RangeKVSetService::Service, ::api::v1::RangeKVSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RangeKVSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::RangeKVSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
}

RangeKVSetService::Service::~Service() {
}

::grpc::Status RangeKVSetService::Service::Exec(::grpc::ServerContext* context, const ::api::v1::RangeKVSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RangeKVGetService_method_names[] = {
  "/api.v1.RangeKVGetService/Exec",
};

std::unique_ptr< RangeKVGetService::Stub> RangeKVGetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RangeKVGetService::Stub> stub(new RangeKVGetService::Stub(channel, options));
  return stub;
}

RangeKVGetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exec_(RangeKVGetService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RangeKVGetService::Stub::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVGetRequest& request, ::api::v1::RangeKVGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::RangeKVGetRequest, ::api::v1::RangeKVGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RangeKVGetService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVGetRequest* request, ::api::v1::RangeKVGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::RangeKVGetRequest, ::api::v1::RangeKVGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RangeKVGetService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVGetRequest* request, ::api::v1::RangeKVGetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeKVGetResponse>* RangeKVGetService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::v1::RangeKVGetResponse, ::api::v1::RangeKVGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::v1::RangeKVGetResponse>* RangeKVGetService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

RangeKVGetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RangeKVGetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RangeKVGetService::Service, ::api::v1::RangeKVGetRequest, ::api::v1::RangeKVGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RangeKVGetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::RangeKVGetRequest* req,
             ::api::v1::RangeKVGetResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
}

RangeKVGetService::Service::~Service() {
}

::grpc::Status RangeKVGetService::Service::Exec(::grpc::ServerContext* context, const ::api::v1::RangeKVGetRequest* request, ::api::v1::RangeKVGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RangeKVDeleteService_method_names[] = {
  "/api.v1.RangeKVDeleteService/Exec",
};

std::unique_ptr< RangeKVDeleteService::Stub> RangeKVDeleteService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RangeKVDeleteService::Stub> stub(new RangeKVDeleteService::Stub(channel, options));
  return stub;
}

RangeKVDeleteService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Exec_(RangeKVDeleteService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RangeKVDeleteService::Stub::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVDeleteRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::v1::RangeKVDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RangeKVDeleteService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVDeleteRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::v1::RangeKVDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RangeKVDeleteService::Stub::async::Exec(::grpc::ClientContext* context, const ::api::v1::RangeKVDeleteRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RangeKVDeleteService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::api::v1::RangeKVDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RangeKVDeleteService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::api::v1::RangeKVDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

RangeKVDeleteService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RangeKVDeleteService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RangeKVDeleteService::Service, ::api::v1::RangeKVDeleteRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RangeKVDeleteService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::v1::RangeKVDeleteRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
}

RangeKVDeleteService::Service::~Service() {
}

::grpc::Status RangeKVDeleteService::Service::Exec(::grpc::ServerContext* context, const ::api::v1::RangeKVDeleteRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api
}  // namespace v1

