// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/framer.proto
#ifndef GRPC_v1_2fframer_2eproto__INCLUDED
#define GRPC_v1_2fframer_2eproto__INCLUDED

#include "v1/framer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace api {
namespace v1 {

class FrameService final {
 public:
  static constexpr char const* service_full_name() {
    return "api.v1.FrameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> Iterate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(IterateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> AsyncIterate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(AsyncIterateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> PrepareAsyncIterate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(PrepareAsyncIterateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> Write(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(WriteRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> AsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(AsyncWriteRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(PrepareAsyncWriteRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(StreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(PrepareAsyncStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Iterate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameIteratorRequest,::api::v1::FrameIteratorResponse>* reactor) = 0;
      virtual void Write(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameWriterRequest,::api::v1::FrameWriterResponse>* reactor) = 0;
      virtual void Stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameStreamerRequest,::api::v1::FrameStreamerResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* IterateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* AsyncIterateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* PrepareAsyncIterateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* WriteRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* StreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> Iterate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(IterateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> AsyncIterate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(AsyncIterateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>> PrepareAsyncIterate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>>(PrepareAsyncIterateRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> Write(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(WriteRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> AsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(AsyncWriteRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>>(PrepareAsyncWriteRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(StreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>>(PrepareAsyncStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Iterate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameIteratorRequest,::api::v1::FrameIteratorResponse>* reactor) override;
      void Write(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameWriterRequest,::api::v1::FrameWriterResponse>* reactor) override;
      void Stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::api::v1::FrameStreamerRequest,::api::v1::FrameStreamerResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* IterateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* AsyncIterateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* PrepareAsyncIterateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* WriteRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* AsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* StreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Iterate_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Stream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Iterate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* stream);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* stream);
    virtual ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Iterate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Iterate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Iterate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iterate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIterate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Iterate<WithAsyncMethod_Write<WithAsyncMethod_Stream<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Iterate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Iterate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Iterate(context); }));
    }
    ~WithCallbackMethod_Iterate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iterate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::api::v1::FrameIteratorRequest, ::api::v1::FrameIteratorResponse>* Iterate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Write() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Write(context); }));
    }
    ~WithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::api::v1::FrameWriterRequest, ::api::v1::FrameWriterResponse>* Write(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Stream(context); }));
    }
    ~WithCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::api::v1::FrameStreamerRequest, ::api::v1::FrameStreamerResponse>* Stream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Iterate<WithCallbackMethod_Write<WithCallbackMethod_Stream<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Iterate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Iterate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Iterate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iterate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Iterate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Iterate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Iterate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iterate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIterate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Iterate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Iterate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Iterate(context); }));
    }
    ~WithRawCallbackMethod_Iterate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iterate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameIteratorResponse, ::api::v1::FrameIteratorRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Iterate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Write() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Write(context); }));
    }
    ~WithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameWriterResponse, ::api::v1::FrameWriterRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Write(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Stream(context); }));
    }
    ~WithRawCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::api::v1::FrameStreamerResponse, ::api::v1::FrameStreamerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Stream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace v1
}  // namespace api


#endif  // GRPC_v1_2fframer_2eproto__INCLUDED
