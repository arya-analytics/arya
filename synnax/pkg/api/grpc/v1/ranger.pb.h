// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/ranger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2franger_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_v1_2franger_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "telempb/telem.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_v1_2franger_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2franger_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_v1_2franger_2eproto;
namespace api {
namespace v1 {
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RangeCreateRequest;
struct RangeCreateRequestDefaultTypeInternal;
extern RangeCreateRequestDefaultTypeInternal _RangeCreateRequest_default_instance_;
class RangeCreateResponse;
struct RangeCreateResponseDefaultTypeInternal;
extern RangeCreateResponseDefaultTypeInternal _RangeCreateResponse_default_instance_;
class RangeKVDeleteRequest;
struct RangeKVDeleteRequestDefaultTypeInternal;
extern RangeKVDeleteRequestDefaultTypeInternal _RangeKVDeleteRequest_default_instance_;
class RangeKVGetRequest;
struct RangeKVGetRequestDefaultTypeInternal;
extern RangeKVGetRequestDefaultTypeInternal _RangeKVGetRequest_default_instance_;
class RangeKVGetResponse;
struct RangeKVGetResponseDefaultTypeInternal;
extern RangeKVGetResponseDefaultTypeInternal _RangeKVGetResponse_default_instance_;
class RangeKVGetResponse_PairsEntry_DoNotUse;
struct RangeKVGetResponse_PairsEntry_DoNotUseDefaultTypeInternal;
extern RangeKVGetResponse_PairsEntry_DoNotUseDefaultTypeInternal _RangeKVGetResponse_PairsEntry_DoNotUse_default_instance_;
class RangeKVSetRequest;
struct RangeKVSetRequestDefaultTypeInternal;
extern RangeKVSetRequestDefaultTypeInternal _RangeKVSetRequest_default_instance_;
class RangeKVSetRequest_PairsEntry_DoNotUse;
struct RangeKVSetRequest_PairsEntry_DoNotUseDefaultTypeInternal;
extern RangeKVSetRequest_PairsEntry_DoNotUseDefaultTypeInternal _RangeKVSetRequest_PairsEntry_DoNotUse_default_instance_;
class RangeRetrieveRequest;
struct RangeRetrieveRequestDefaultTypeInternal;
extern RangeRetrieveRequestDefaultTypeInternal _RangeRetrieveRequest_default_instance_;
class RangeRetrieveResponse;
struct RangeRetrieveResponseDefaultTypeInternal;
extern RangeRetrieveResponseDefaultTypeInternal _RangeRetrieveResponse_default_instance_;
}  // namespace v1
}  // namespace api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace api {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Range final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Range(::google::protobuf::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Range& from) {
    Range::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.Range";
  }
  protected:
  explicit Range(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kNameFieldNumber = 3,
    kTimeRangeFieldNumber = 2,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string name = 3 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .telem.TimeRange time_range = 2 [json_name = "timeRange"];
  bool has_time_range() const;
  void clear_time_range() ;
  const ::telem::TimeRange& time_range() const;
  PROTOBUF_NODISCARD ::telem::TimeRange* release_time_range();
  ::telem::TimeRange* mutable_time_range();
  void set_allocated_time_range(::telem::TimeRange* value);
  void unsafe_arena_set_allocated_time_range(::telem::TimeRange* value);
  ::telem::TimeRange* unsafe_arena_release_time_range();

  private:
  const ::telem::TimeRange& _internal_time_range() const;
  ::telem::TimeRange* _internal_mutable_time_range();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.Range)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 28, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::telem::TimeRange* time_range_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeCreateRequest) */ {
 public:
  inline RangeCreateRequest() : RangeCreateRequest(nullptr) {}
  ~RangeCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeCreateRequest(::google::protobuf::internal::ConstantInitialized);

  RangeCreateRequest(const RangeCreateRequest& from);
  RangeCreateRequest(RangeCreateRequest&& from) noexcept
    : RangeCreateRequest() {
    *this = ::std::move(from);
  }

  inline RangeCreateRequest& operator=(const RangeCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeCreateRequest& operator=(RangeCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeCreateRequest* internal_default_instance() {
    return reinterpret_cast<const RangeCreateRequest*>(
               &_RangeCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RangeCreateRequest& a, RangeCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeCreateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeCreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeCreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeCreateRequest& from) {
    RangeCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeCreateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeCreateRequest";
  }
  protected:
  explicit RangeCreateRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;

  public:
  void clear_ranges() ;
  ::api::v1::Range* mutable_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
      mutable_ranges();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Range>& _internal_ranges() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Range>* _internal_mutable_ranges();
  public:
  const ::api::v1::Range& ranges(int index) const;
  ::api::v1::Range* add_ranges();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
      ranges() const;
  // @@protoc_insertion_point(class_scope:api.v1.RangeCreateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Range > ranges_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeCreateResponse) */ {
 public:
  inline RangeCreateResponse() : RangeCreateResponse(nullptr) {}
  ~RangeCreateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeCreateResponse(::google::protobuf::internal::ConstantInitialized);

  RangeCreateResponse(const RangeCreateResponse& from);
  RangeCreateResponse(RangeCreateResponse&& from) noexcept
    : RangeCreateResponse() {
    *this = ::std::move(from);
  }

  inline RangeCreateResponse& operator=(const RangeCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeCreateResponse& operator=(RangeCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeCreateResponse* internal_default_instance() {
    return reinterpret_cast<const RangeCreateResponse*>(
               &_RangeCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RangeCreateResponse& a, RangeCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeCreateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeCreateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeCreateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeCreateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeCreateResponse& from) {
    RangeCreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeCreateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeCreateResponse";
  }
  protected:
  explicit RangeCreateResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;

  public:
  void clear_ranges() ;
  ::api::v1::Range* mutable_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
      mutable_ranges();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Range>& _internal_ranges() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Range>* _internal_mutable_ranges();
  public:
  const ::api::v1::Range& ranges(int index) const;
  ::api::v1::Range* add_ranges();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
      ranges() const;
  // @@protoc_insertion_point(class_scope:api.v1.RangeCreateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Range > ranges_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeRetrieveRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeRetrieveRequest) */ {
 public:
  inline RangeRetrieveRequest() : RangeRetrieveRequest(nullptr) {}
  ~RangeRetrieveRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeRetrieveRequest(::google::protobuf::internal::ConstantInitialized);

  RangeRetrieveRequest(const RangeRetrieveRequest& from);
  RangeRetrieveRequest(RangeRetrieveRequest&& from) noexcept
    : RangeRetrieveRequest() {
    *this = ::std::move(from);
  }

  inline RangeRetrieveRequest& operator=(const RangeRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeRetrieveRequest& operator=(RangeRetrieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeRetrieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeRetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const RangeRetrieveRequest*>(
               &_RangeRetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RangeRetrieveRequest& a, RangeRetrieveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeRetrieveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeRetrieveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeRetrieveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeRetrieveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeRetrieveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeRetrieveRequest& from) {
    RangeRetrieveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeRetrieveRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeRetrieveRequest";
  }
  protected:
  explicit RangeRetrieveRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kNamesFieldNumber = 2,
  };
  // repeated string keys = 1 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // repeated string names = 2 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RangeRetrieveRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::RepeatedPtrField<std::string> names_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeRetrieveResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeRetrieveResponse) */ {
 public:
  inline RangeRetrieveResponse() : RangeRetrieveResponse(nullptr) {}
  ~RangeRetrieveResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeRetrieveResponse(::google::protobuf::internal::ConstantInitialized);

  RangeRetrieveResponse(const RangeRetrieveResponse& from);
  RangeRetrieveResponse(RangeRetrieveResponse&& from) noexcept
    : RangeRetrieveResponse() {
    *this = ::std::move(from);
  }

  inline RangeRetrieveResponse& operator=(const RangeRetrieveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeRetrieveResponse& operator=(RangeRetrieveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeRetrieveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeRetrieveResponse* internal_default_instance() {
    return reinterpret_cast<const RangeRetrieveResponse*>(
               &_RangeRetrieveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RangeRetrieveResponse& a, RangeRetrieveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeRetrieveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeRetrieveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeRetrieveResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeRetrieveResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeRetrieveResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeRetrieveResponse& from) {
    RangeRetrieveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeRetrieveResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeRetrieveResponse";
  }
  protected:
  explicit RangeRetrieveResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;

  public:
  void clear_ranges() ;
  ::api::v1::Range* mutable_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
      mutable_ranges();
  private:
  const ::google::protobuf::RepeatedPtrField<::api::v1::Range>& _internal_ranges() const;
  ::google::protobuf::RepeatedPtrField<::api::v1::Range>* _internal_mutable_ranges();
  public:
  const ::api::v1::Range& ranges(int index) const;
  ::api::v1::Range* add_ranges();
  const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
      ranges() const;
  // @@protoc_insertion_point(class_scope:api.v1.RangeRetrieveResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::api::v1::Range > ranges_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeKVSetRequest_PairsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<RangeKVSetRequest_PairsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<RangeKVSetRequest_PairsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  RangeKVSetRequest_PairsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVSetRequest_PairsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RangeKVSetRequest_PairsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RangeKVSetRequest_PairsEntry_DoNotUse& other);
  static const RangeKVSetRequest_PairsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RangeKVSetRequest_PairsEntry_DoNotUse*>(&_RangeKVSetRequest_PairsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "api.v1.RangeKVSetRequest.PairsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "api.v1.RangeKVSetRequest.PairsEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_v1_2franger_2eproto;
};
// -------------------------------------------------------------------

class RangeKVSetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeKVSetRequest) */ {
 public:
  inline RangeKVSetRequest() : RangeKVSetRequest(nullptr) {}
  ~RangeKVSetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVSetRequest(::google::protobuf::internal::ConstantInitialized);

  RangeKVSetRequest(const RangeKVSetRequest& from);
  RangeKVSetRequest(RangeKVSetRequest&& from) noexcept
    : RangeKVSetRequest() {
    *this = ::std::move(from);
  }

  inline RangeKVSetRequest& operator=(const RangeKVSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeKVSetRequest& operator=(RangeKVSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeKVSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeKVSetRequest* internal_default_instance() {
    return reinterpret_cast<const RangeKVSetRequest*>(
               &_RangeKVSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RangeKVSetRequest& a, RangeKVSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeKVSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeKVSetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeKVSetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeKVSetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeKVSetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeKVSetRequest& from) {
    RangeKVSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeKVSetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeKVSetRequest";
  }
  protected:
  explicit RangeKVSetRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 2,
    kRangeKeyFieldNumber = 1,
  };
  // map<string, string> pairs = 2 [json_name = "pairs"];
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;

  public:
  void clear_pairs() ;
  const ::google::protobuf::Map<std::string, std::string>& pairs() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_pairs();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_pairs() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_pairs();

  public:
  // string range_key = 1 [json_name = "rangeKey"];
  void clear_range_key() ;
  const std::string& range_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_range_key(Arg_&& arg, Args_... args);
  std::string* mutable_range_key();
  PROTOBUF_NODISCARD std::string* release_range_key();
  void set_allocated_range_key(std::string* ptr);

  private:
  const std::string& _internal_range_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_range_key(
      const std::string& value);
  std::string* _internal_mutable_range_key();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RangeKVSetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 1, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<RangeKVSetRequest_PairsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        pairs_;
    ::google::protobuf::internal::ArenaStringPtr range_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeKVGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeKVGetRequest) */ {
 public:
  inline RangeKVGetRequest() : RangeKVGetRequest(nullptr) {}
  ~RangeKVGetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVGetRequest(::google::protobuf::internal::ConstantInitialized);

  RangeKVGetRequest(const RangeKVGetRequest& from);
  RangeKVGetRequest(RangeKVGetRequest&& from) noexcept
    : RangeKVGetRequest() {
    *this = ::std::move(from);
  }

  inline RangeKVGetRequest& operator=(const RangeKVGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeKVGetRequest& operator=(RangeKVGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeKVGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeKVGetRequest* internal_default_instance() {
    return reinterpret_cast<const RangeKVGetRequest*>(
               &_RangeKVGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RangeKVGetRequest& a, RangeKVGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeKVGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeKVGetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeKVGetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeKVGetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeKVGetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeKVGetRequest& from) {
    RangeKVGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeKVGetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeKVGetRequest";
  }
  protected:
  explicit RangeKVGetRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kRangeKeyFieldNumber = 1,
  };
  // repeated string keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string range_key = 1 [json_name = "rangeKey"];
  void clear_range_key() ;
  const std::string& range_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_range_key(Arg_&& arg, Args_... args);
  std::string* mutable_range_key();
  PROTOBUF_NODISCARD std::string* release_range_key();
  void set_allocated_range_key(std::string* ptr);

  private:
  const std::string& _internal_range_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_range_key(
      const std::string& value);
  std::string* _internal_mutable_range_key();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RangeKVGetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::internal::ArenaStringPtr range_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeKVGetResponse_PairsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<RangeKVGetResponse_PairsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<RangeKVGetResponse_PairsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  RangeKVGetResponse_PairsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVGetResponse_PairsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RangeKVGetResponse_PairsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RangeKVGetResponse_PairsEntry_DoNotUse& other);
  static const RangeKVGetResponse_PairsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RangeKVGetResponse_PairsEntry_DoNotUse*>(&_RangeKVGetResponse_PairsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "api.v1.RangeKVGetResponse.PairsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "api.v1.RangeKVGetResponse.PairsEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_v1_2franger_2eproto;
};
// -------------------------------------------------------------------

class RangeKVGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeKVGetResponse) */ {
 public:
  inline RangeKVGetResponse() : RangeKVGetResponse(nullptr) {}
  ~RangeKVGetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVGetResponse(::google::protobuf::internal::ConstantInitialized);

  RangeKVGetResponse(const RangeKVGetResponse& from);
  RangeKVGetResponse(RangeKVGetResponse&& from) noexcept
    : RangeKVGetResponse() {
    *this = ::std::move(from);
  }

  inline RangeKVGetResponse& operator=(const RangeKVGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeKVGetResponse& operator=(RangeKVGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeKVGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeKVGetResponse* internal_default_instance() {
    return reinterpret_cast<const RangeKVGetResponse*>(
               &_RangeKVGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RangeKVGetResponse& a, RangeKVGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeKVGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeKVGetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeKVGetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeKVGetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeKVGetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeKVGetResponse& from) {
    RangeKVGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeKVGetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeKVGetResponse";
  }
  protected:
  explicit RangeKVGetResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 1,
  };
  // map<string, string> pairs = 1 [json_name = "pairs"];
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;

  public:
  void clear_pairs() ;
  const ::google::protobuf::Map<std::string, std::string>& pairs() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_pairs();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_pairs() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_pairs();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RangeKVGetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<RangeKVGetResponse_PairsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        pairs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};// -------------------------------------------------------------------

class RangeKVDeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.RangeKVDeleteRequest) */ {
 public:
  inline RangeKVDeleteRequest() : RangeKVDeleteRequest(nullptr) {}
  ~RangeKVDeleteRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangeKVDeleteRequest(::google::protobuf::internal::ConstantInitialized);

  RangeKVDeleteRequest(const RangeKVDeleteRequest& from);
  RangeKVDeleteRequest(RangeKVDeleteRequest&& from) noexcept
    : RangeKVDeleteRequest() {
    *this = ::std::move(from);
  }

  inline RangeKVDeleteRequest& operator=(const RangeKVDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeKVDeleteRequest& operator=(RangeKVDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeKVDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeKVDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const RangeKVDeleteRequest*>(
               &_RangeKVDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RangeKVDeleteRequest& a, RangeKVDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeKVDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeKVDeleteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeKVDeleteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeKVDeleteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangeKVDeleteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangeKVDeleteRequest& from) {
    RangeKVDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeKVDeleteRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "api.v1.RangeKVDeleteRequest";
  }
  protected:
  explicit RangeKVDeleteRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kRangeKeyFieldNumber = 1,
  };
  // repeated string keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string range_key = 1 [json_name = "rangeKey"];
  void clear_range_key() ;
  const std::string& range_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_range_key(Arg_&& arg, Args_... args);
  std::string* mutable_range_key();
  PROTOBUF_NODISCARD std::string* release_range_key();
  void set_allocated_range_key(std::string* ptr);

  private:
  const std::string& _internal_range_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_range_key(
      const std::string& value);
  std::string* _internal_mutable_range_key();

  public:
  // @@protoc_insertion_point(class_scope:api.v1.RangeKVDeleteRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::internal::ArenaStringPtr range_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_v1_2franger_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Range

// string key = 1 [json_name = "key"];
inline void Range::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Range::key() const {
  // @@protoc_insertion_point(field_get:api.v1.Range.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Range::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.Range.key)
}
inline std::string* Range::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:api.v1.Range.key)
  return _s;
}
inline const std::string& Range::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void Range::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Range::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.Range.key)
  return _impl_.key_.Release();
}
inline void Range::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.Range.key)
}

// .telem.TimeRange time_range = 2 [json_name = "timeRange"];
inline bool Range::has_time_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_range_ != nullptr);
  return value;
}
inline const ::telem::TimeRange& Range::_internal_time_range() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::telem::TimeRange* p = _impl_.time_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::telem::TimeRange&>(::telem::_TimeRange_default_instance_);
}
inline const ::telem::TimeRange& Range::time_range() const {
  // @@protoc_insertion_point(field_get:api.v1.Range.time_range)
  return _internal_time_range();
}
inline void Range::unsafe_arena_set_allocated_time_range(::telem::TimeRange* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_range_);
  }
  _impl_.time_range_ = reinterpret_cast<::telem::TimeRange*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.Range.time_range)
}
inline ::telem::TimeRange* Range::release_time_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::telem::TimeRange* released = _impl_.time_range_;
  _impl_.time_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::telem::TimeRange* Range::unsafe_arena_release_time_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.Range.time_range)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::telem::TimeRange* temp = _impl_.time_range_;
  _impl_.time_range_ = nullptr;
  return temp;
}
inline ::telem::TimeRange* Range::_internal_mutable_time_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::telem::TimeRange>(GetArenaForAllocation());
    _impl_.time_range_ = reinterpret_cast<::telem::TimeRange*>(p);
  }
  return _impl_.time_range_;
}
inline ::telem::TimeRange* Range::mutable_time_range() {
  ::telem::TimeRange* _msg = _internal_mutable_time_range();
  // @@protoc_insertion_point(field_mutable:api.v1.Range.time_range)
  return _msg;
}
inline void Range::set_allocated_time_range(::telem::TimeRange* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_range_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_range_ = reinterpret_cast<::telem::TimeRange*>(value);
  // @@protoc_insertion_point(field_set_allocated:api.v1.Range.time_range)
}

// string name = 3 [json_name = "name"];
inline void Range::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Range::name() const {
  // @@protoc_insertion_point(field_get:api.v1.Range.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Range::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.Range.name)
}
inline std::string* Range::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:api.v1.Range.name)
  return _s;
}
inline const std::string& Range::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Range::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Range::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.Range.name)
  return _impl_.name_.Release();
}
inline void Range::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.Range.name)
}

// -------------------------------------------------------------------

// RangeCreateRequest

// repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
inline int RangeCreateRequest::_internal_ranges_size() const {
  return _internal_ranges().size();
}
inline int RangeCreateRequest::ranges_size() const {
  return _internal_ranges_size();
}
inline void RangeCreateRequest::clear_ranges() {
  _internal_mutable_ranges()->Clear();
}
inline ::api::v1::Range* RangeCreateRequest::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeCreateRequest.ranges)
  return _internal_mutable_ranges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
RangeCreateRequest::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeCreateRequest.ranges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ranges();
}
inline const ::api::v1::Range& RangeCreateRequest::ranges(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeCreateRequest.ranges)
    return _internal_ranges().Get(index);
}
inline ::api::v1::Range* RangeCreateRequest::add_ranges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Range* _add = _internal_mutable_ranges()->Add();
  // @@protoc_insertion_point(field_add:api.v1.RangeCreateRequest.ranges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
RangeCreateRequest::ranges() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeCreateRequest.ranges)
  return _internal_ranges();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Range>&
RangeCreateRequest::_internal_ranges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ranges_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Range>*
RangeCreateRequest::_internal_mutable_ranges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ranges_;
}

// -------------------------------------------------------------------

// RangeCreateResponse

// repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
inline int RangeCreateResponse::_internal_ranges_size() const {
  return _internal_ranges().size();
}
inline int RangeCreateResponse::ranges_size() const {
  return _internal_ranges_size();
}
inline void RangeCreateResponse::clear_ranges() {
  _internal_mutable_ranges()->Clear();
}
inline ::api::v1::Range* RangeCreateResponse::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeCreateResponse.ranges)
  return _internal_mutable_ranges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
RangeCreateResponse::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeCreateResponse.ranges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ranges();
}
inline const ::api::v1::Range& RangeCreateResponse::ranges(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeCreateResponse.ranges)
    return _internal_ranges().Get(index);
}
inline ::api::v1::Range* RangeCreateResponse::add_ranges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Range* _add = _internal_mutable_ranges()->Add();
  // @@protoc_insertion_point(field_add:api.v1.RangeCreateResponse.ranges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
RangeCreateResponse::ranges() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeCreateResponse.ranges)
  return _internal_ranges();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Range>&
RangeCreateResponse::_internal_ranges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ranges_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Range>*
RangeCreateResponse::_internal_mutable_ranges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ranges_;
}

// -------------------------------------------------------------------

// RangeRetrieveRequest

// repeated string keys = 1 [json_name = "keys"];
inline int RangeRetrieveRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int RangeRetrieveRequest::keys_size() const {
  return _internal_keys_size();
}
inline void RangeRetrieveRequest::clear_keys() {
  _internal_mutable_keys()->Clear();
}
inline std::string* RangeRetrieveRequest::add_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:api.v1.RangeRetrieveRequest.keys)
  return _s;
}
inline const std::string& RangeRetrieveRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeRetrieveRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* RangeRetrieveRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeRetrieveRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void RangeRetrieveRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::add_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::add_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::add_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.v1.RangeRetrieveRequest.keys)
}
inline void RangeRetrieveRequest::add_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:api.v1.RangeRetrieveRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeRetrieveRequest::keys() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeRetrieveRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* RangeRetrieveRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeRetrieveRequest.keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeRetrieveRequest::_internal_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RangeRetrieveRequest::_internal_mutable_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.keys_;
}

// repeated string names = 2 [json_name = "names"];
inline int RangeRetrieveRequest::_internal_names_size() const {
  return _internal_names().size();
}
inline int RangeRetrieveRequest::names_size() const {
  return _internal_names_size();
}
inline void RangeRetrieveRequest::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* RangeRetrieveRequest::add_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:api.v1.RangeRetrieveRequest.names)
  return _s;
}
inline const std::string& RangeRetrieveRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeRetrieveRequest.names)
  return _internal_names().Get(index);
}
inline std::string* RangeRetrieveRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeRetrieveRequest.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void RangeRetrieveRequest::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::add_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::add_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::add_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.v1.RangeRetrieveRequest.names)
}
inline void RangeRetrieveRequest::add_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:api.v1.RangeRetrieveRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeRetrieveRequest::names() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeRetrieveRequest.names)
  return _internal_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* RangeRetrieveRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeRetrieveRequest.names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeRetrieveRequest::_internal_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RangeRetrieveRequest::_internal_mutable_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.names_;
}

// -------------------------------------------------------------------

// RangeRetrieveResponse

// repeated .api.v1.Range ranges = 1 [json_name = "ranges"];
inline int RangeRetrieveResponse::_internal_ranges_size() const {
  return _internal_ranges().size();
}
inline int RangeRetrieveResponse::ranges_size() const {
  return _internal_ranges_size();
}
inline void RangeRetrieveResponse::clear_ranges() {
  _internal_mutable_ranges()->Clear();
}
inline ::api::v1::Range* RangeRetrieveResponse::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeRetrieveResponse.ranges)
  return _internal_mutable_ranges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::v1::Range >*
RangeRetrieveResponse::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeRetrieveResponse.ranges)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ranges();
}
inline const ::api::v1::Range& RangeRetrieveResponse::ranges(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeRetrieveResponse.ranges)
    return _internal_ranges().Get(index);
}
inline ::api::v1::Range* RangeRetrieveResponse::add_ranges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::api::v1::Range* _add = _internal_mutable_ranges()->Add();
  // @@protoc_insertion_point(field_add:api.v1.RangeRetrieveResponse.ranges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::v1::Range >&
RangeRetrieveResponse::ranges() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeRetrieveResponse.ranges)
  return _internal_ranges();
}
inline const ::google::protobuf::RepeatedPtrField<::api::v1::Range>&
RangeRetrieveResponse::_internal_ranges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ranges_;
}
inline ::google::protobuf::RepeatedPtrField<::api::v1::Range>*
RangeRetrieveResponse::_internal_mutable_ranges() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ranges_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RangeKVSetRequest

// string range_key = 1 [json_name = "rangeKey"];
inline void RangeKVSetRequest::clear_range_key() {
  _impl_.range_key_.ClearToEmpty();
}
inline const std::string& RangeKVSetRequest::range_key() const {
  // @@protoc_insertion_point(field_get:api.v1.RangeKVSetRequest.range_key)
  return _internal_range_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RangeKVSetRequest::set_range_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.RangeKVSetRequest.range_key)
}
inline std::string* RangeKVSetRequest::mutable_range_key() {
  std::string* _s = _internal_mutable_range_key();
  // @@protoc_insertion_point(field_mutable:api.v1.RangeKVSetRequest.range_key)
  return _s;
}
inline const std::string& RangeKVSetRequest::_internal_range_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.range_key_.Get();
}
inline void RangeKVSetRequest::_internal_set_range_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RangeKVSetRequest::_internal_mutable_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.range_key_.Mutable( GetArenaForAllocation());
}
inline std::string* RangeKVSetRequest::release_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.RangeKVSetRequest.range_key)
  return _impl_.range_key_.Release();
}
inline void RangeKVSetRequest::set_allocated_range_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.range_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.range_key_.IsDefault()) {
          _impl_.range_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.RangeKVSetRequest.range_key)
}

// map<string, string> pairs = 2 [json_name = "pairs"];
inline int RangeKVSetRequest::_internal_pairs_size() const {
  return _internal_pairs().size();
}
inline int RangeKVSetRequest::pairs_size() const {
  return _internal_pairs_size();
}
inline void RangeKVSetRequest::clear_pairs() {
  _impl_.pairs_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RangeKVSetRequest::_internal_pairs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pairs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RangeKVSetRequest::pairs() const {
  // @@protoc_insertion_point(field_map:api.v1.RangeKVSetRequest.pairs)
  return _internal_pairs();
}
inline ::google::protobuf::Map<std::string, std::string>* RangeKVSetRequest::_internal_mutable_pairs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.pairs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RangeKVSetRequest::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_map:api.v1.RangeKVSetRequest.pairs)
  return _internal_mutable_pairs();
}

// -------------------------------------------------------------------

// RangeKVGetRequest

// string range_key = 1 [json_name = "rangeKey"];
inline void RangeKVGetRequest::clear_range_key() {
  _impl_.range_key_.ClearToEmpty();
}
inline const std::string& RangeKVGetRequest::range_key() const {
  // @@protoc_insertion_point(field_get:api.v1.RangeKVGetRequest.range_key)
  return _internal_range_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RangeKVGetRequest::set_range_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.RangeKVGetRequest.range_key)
}
inline std::string* RangeKVGetRequest::mutable_range_key() {
  std::string* _s = _internal_mutable_range_key();
  // @@protoc_insertion_point(field_mutable:api.v1.RangeKVGetRequest.range_key)
  return _s;
}
inline const std::string& RangeKVGetRequest::_internal_range_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.range_key_.Get();
}
inline void RangeKVGetRequest::_internal_set_range_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RangeKVGetRequest::_internal_mutable_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.range_key_.Mutable( GetArenaForAllocation());
}
inline std::string* RangeKVGetRequest::release_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.RangeKVGetRequest.range_key)
  return _impl_.range_key_.Release();
}
inline void RangeKVGetRequest::set_allocated_range_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.range_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.range_key_.IsDefault()) {
          _impl_.range_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.RangeKVGetRequest.range_key)
}

// repeated string keys = 2 [json_name = "keys"];
inline int RangeKVGetRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int RangeKVGetRequest::keys_size() const {
  return _internal_keys_size();
}
inline void RangeKVGetRequest::clear_keys() {
  _internal_mutable_keys()->Clear();
}
inline std::string* RangeKVGetRequest::add_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:api.v1.RangeKVGetRequest.keys)
  return _s;
}
inline const std::string& RangeKVGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeKVGetRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* RangeKVGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeKVGetRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void RangeKVGetRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::add_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::add_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::add_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.v1.RangeKVGetRequest.keys)
}
inline void RangeKVGetRequest::add_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:api.v1.RangeKVGetRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeKVGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeKVGetRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* RangeKVGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeKVGetRequest.keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeKVGetRequest::_internal_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RangeKVGetRequest::_internal_mutable_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RangeKVGetResponse

// map<string, string> pairs = 1 [json_name = "pairs"];
inline int RangeKVGetResponse::_internal_pairs_size() const {
  return _internal_pairs().size();
}
inline int RangeKVGetResponse::pairs_size() const {
  return _internal_pairs_size();
}
inline void RangeKVGetResponse::clear_pairs() {
  _impl_.pairs_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RangeKVGetResponse::_internal_pairs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pairs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RangeKVGetResponse::pairs() const {
  // @@protoc_insertion_point(field_map:api.v1.RangeKVGetResponse.pairs)
  return _internal_pairs();
}
inline ::google::protobuf::Map<std::string, std::string>* RangeKVGetResponse::_internal_mutable_pairs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.pairs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RangeKVGetResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_map:api.v1.RangeKVGetResponse.pairs)
  return _internal_mutable_pairs();
}

// -------------------------------------------------------------------

// RangeKVDeleteRequest

// string range_key = 1 [json_name = "rangeKey"];
inline void RangeKVDeleteRequest::clear_range_key() {
  _impl_.range_key_.ClearToEmpty();
}
inline const std::string& RangeKVDeleteRequest::range_key() const {
  // @@protoc_insertion_point(field_get:api.v1.RangeKVDeleteRequest.range_key)
  return _internal_range_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RangeKVDeleteRequest::set_range_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api.v1.RangeKVDeleteRequest.range_key)
}
inline std::string* RangeKVDeleteRequest::mutable_range_key() {
  std::string* _s = _internal_mutable_range_key();
  // @@protoc_insertion_point(field_mutable:api.v1.RangeKVDeleteRequest.range_key)
  return _s;
}
inline const std::string& RangeKVDeleteRequest::_internal_range_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.range_key_.Get();
}
inline void RangeKVDeleteRequest::_internal_set_range_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RangeKVDeleteRequest::_internal_mutable_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.range_key_.Mutable( GetArenaForAllocation());
}
inline std::string* RangeKVDeleteRequest::release_range_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:api.v1.RangeKVDeleteRequest.range_key)
  return _impl_.range_key_.Release();
}
inline void RangeKVDeleteRequest::set_allocated_range_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.range_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.range_key_.IsDefault()) {
          _impl_.range_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:api.v1.RangeKVDeleteRequest.range_key)
}

// repeated string keys = 2 [json_name = "keys"];
inline int RangeKVDeleteRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int RangeKVDeleteRequest::keys_size() const {
  return _internal_keys_size();
}
inline void RangeKVDeleteRequest::clear_keys() {
  _internal_mutable_keys()->Clear();
}
inline std::string* RangeKVDeleteRequest::add_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:api.v1.RangeKVDeleteRequest.keys)
  return _s;
}
inline const std::string& RangeKVDeleteRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.v1.RangeKVDeleteRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* RangeKVDeleteRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.v1.RangeKVDeleteRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void RangeKVDeleteRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::add_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::add_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::add_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.v1.RangeKVDeleteRequest.keys)
}
inline void RangeKVDeleteRequest::add_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:api.v1.RangeKVDeleteRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeKVDeleteRequest::keys() const {
  // @@protoc_insertion_point(field_list:api.v1.RangeKVDeleteRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* RangeKVDeleteRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.v1.RangeKVDeleteRequest.keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RangeKVDeleteRequest::_internal_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RangeKVDeleteRequest::_internal_mutable_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.keys_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_v1_2franger_2eproto_2epb_2eh
